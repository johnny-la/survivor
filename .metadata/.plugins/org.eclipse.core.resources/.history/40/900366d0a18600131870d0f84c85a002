package com.jonathan.survivor.renderers;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.esotericsoftware.spine.AnimationState;
import com.esotericsoftware.spine.AnimationState.AnimationStateListener;
import com.esotericsoftware.spine.AnimationStateData;
import com.esotericsoftware.spine.Event;
import com.esotericsoftware.spine.Skeleton;
import com.jonathan.survivor.Assets;
import com.jonathan.survivor.entity.Human.Direction;
import com.jonathan.survivor.entity.Human.Mode;
import com.jonathan.survivor.entity.Human.State;
import com.jonathan.survivor.entity.Player;

public class PlayerRenderer 
{	
	/** Stores the SpriteBatcher used to draw the player's sprites. */
	private SpriteBatch batcher;	
	
	/** Stores the Assets singleton which stores all of the visual assets needed to draw the player. */
	private Assets assets = Assets.instance;
	
	/** Stores the OrthographicCamera where the player is drawn. */
	private OrthographicCamera worldCamera;
	
	/** Stores the Player GameObject we draw to the screen by extracting its position and state. */
	private Player player;
	/** Stores the Spine skeleton instance used to display the player and play his animations. */
	private Skeleton playerSkeleton;
	
	/** Defines the crossfading times between animations. */
	private AnimationStateData animStateData;
	/** Controls the animation of the player and applies the animations the player's skeleton. */
	private AnimationState animationState;
	
	/** Stores the AnimationStateListener that receives animation events. */
	private AnimationStateListener animationListener;
	
	/** Stores the integers assigned to each event in Spine. Used to indicate which event was caught in the AnimationStateListener. */
	private static final int HIT_TREE = 0;
	
	/** Stores the previous state of the player. Animations are only changed if the player's state changes. */
	private State previousPlayerState = null;

	
	/** Accepts the player GameObject to render, the Spine skeleton used to to play his animations, the SpriteBatch used to draw the player, and the world 
	 * camera where the player is drawn. */
	public PlayerRenderer(Player player, SpriteBatch batcher, OrthographicCamera worldCamera)
	{
		//Stores the SpriteBatch used to draw the player.
		this.batcher = batcher;
		//Stores the world camera where the player's sprites are drawn.
		this.worldCamera = worldCamera;
		
		//Stores the Player GameObject we draw to the screen by extracting its position and state.
		this.player = player;
		//Stores the Spine skeleton instance used to display the player and play his animations.
		this.playerSkeleton = player.getSkeleton();
		
		//Sets up the animation states of the player, along with the crossfading times between animations/
		setupAnimationStates();
	}
	
	/** Populates the AnimationStateData and AnimationData instances used by the player. */
	private void setupAnimationStates()
	{
		//Creates a new AnimationStateData instance from the player's skeleton to define the crossfading times between animations.
		animStateData = new AnimationStateData(assets.playerSkeletonData);
		
		//Defines the crossfading times between animations. First two arguments specify the crossfading animations. Third argument specifies crossfading time.
		animStateData.setMix(assets.playerIdle, assets.playerIdle, 0);
		animStateData.setMix(assets.playerWalk, assets.playerIdle, 0.1f);
		animStateData.setMix(assets.playerIdle, assets.playerWalk, 0.1f);
		animStateData.setMix(assets.playerChopTree, assets.playerWalk, 0.27f);
		
		//Creates a listener to listen for events coming from the player's animations.
		animationListener = new AnimationStateListener() {

			@Override
			public void event(int trackIndex, Event event) {
				if(event.getInt() == HIT_TREE)
				{
					player.hitTree();
				}
				
			}

			@Override
			public void complete(int trackIndex, int loopCount) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void start(int trackIndex) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void end(int trackIndex) {
				// TODO Auto-generated method stub
				
			}
			
		};
		
		//Creates a new AnimationState instance used to control the player's animations.
		animationState = new AnimationState(animStateData);
		
		//Register the AnimationStateListener to the player's AnimationState. This will delegate player animation events to the listener.
		animationState.addListener(animationListener);
	}
	
	/** Draws the player using his Spine skeleton, which stores his animations, sprites, and everything needed to draw the player. */
	public void render()
	{
		//If the player is looking left
		if(player.getDirection() == Direction.LEFT)
			//Flip his skeleton to look the other way. The skeleton looks right by default.
			playerSkeleton.setFlipX(true);
		//Else, if the player is facing right
		else
			//Don't flip his skeleton, since his skeleton is made to look to the right by default.
			playerSkeleton.setFlipX(false);
		
		//Set the player skeleton's bottom-center position to the bottom-center position of the Player GameObject.
		playerSkeleton.setX(player.getX());
		playerSkeleton.setY(player.getY());
		
		//Updates the attachments on the player, such as his attached weapons.
		updateAttachments();
		
		//Change the animation if the player's state has changed. Re-setting the AnimationState to the same animation twice causes errors.
		if(player.getState() != previousPlayerState)
		{
			//Update the player's animation since his state has changed.
			updateAnimation();
		}
		
		//Updates the state of the current player animation.
		animationState.update(Gdx.graphics.getDeltaTime());
		//Applies the current animation to the player's skeleton.
		animationState.apply(playerSkeleton);
		
		//Updates the skeleton world transform. Must be done to reset SRT coordinates (or something).
		playerSkeleton.updateWorldTransform();
		
		//Draws the skeleton using the universal SkeletonRenderer instance used by the game.
		assets.skeletonRenderer.draw(batcher, playerSkeleton);
	}
	
	/** Updates the current animation of the player depending on his state. */
	private void updateAnimation()
	{
		//Stores the previous state of the player to determine if his state changes on the next render() call.
		previousPlayerState = player.getState();
		
		//If the player has just spawned
		if(player.getState() == State.SPAWN)
		{
			//Set the player's skeleton back to default pose.
			playerSkeleton.setToSetupPose();
			
			//Sets the character to IDLE state, indicating that the renderer has received the message that the player spawned.
			player.setState(State.IDLE);
		}
		else if(player.getState() == State.IDLE)
		{
			//Sets the player to his idle animation. First argument is an arbitrary index, and third argument specifies to loop the animation.
			animationState.setAnimation(0, assets.playerIdle, true);
		}
		else if(player.getState() == State.WALK)
		{
			//Plays the walk animation. First argument is an arbitrary index, and third argument specifies to loop the walk animation.
			animationState.setAnimation(0, assets.playerWalk, true);
		}
		//If the player is jumping
		if(player.getState() == State.JUMP)
		{
			//If the player is in exploration mode
			if(player.getMode() == Mode.EXPLORING)
			{
				//Plays the jump animation. First argument is an arbitrary index, and third argument specifies to play the animation only once.
				animationState.setAnimation(0, assets.playerJump, false);
			}
		}
		//Else, if the player is falling from one layer to the next
		else if(player.getState() == State.FALL)
		{
			//Plays the player's fall animation. First argument is an arbitrary index, and third argument specifies to play the animation only once.
			animationState.setAnimation(0, assets.playerFall, false);
		}
		//Else, if the player is melee-ing
		else if(player.getState() == State.CHOP_TREE)
		{
			//Plays the melee animation. First argument is an arbitrary index, and third argument specifies to loop the animation.
			animationState.setAnimation(0, assets.playerChopTree, true);
		}
	}
}
