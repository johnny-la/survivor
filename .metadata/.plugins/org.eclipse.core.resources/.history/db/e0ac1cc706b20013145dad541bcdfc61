package com.jonathan.survivor.animations;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.esotericsoftware.spine.Event;
import com.esotericsoftware.spine.Skeleton;
import com.jonathan.survivor.Assets;
import com.jonathan.survivor.entity.Player;
import com.jonathan.survivor.entity.Zombie;

public class VersusAnimation
{
	/** Holds the color which overlays the screen below the pause menu. */
	public static final Color OVERLAY_COLOR = new Color(1f, 1f, 1f, 0.0f);
	
	/** Stores the Assets singleton of the game used to fetch assets to draw the Spine animations. */
	protected Assets assets = Assets.instance;
	
	/** Stores the SpriteBatcher used to draw the animations. */
	private SpriteBatch batcher;
	
	/** Stores the OrthographicCamera used to view the world. */
	private OrthographicCamera worldCamera;
	
	/** Stores the Spine Skeleton instance used to display and render the Versus HUD Animation. */
	private Skeleton versusSkeleton;
	
	/** Holds the amount of time in seconds that the animation has been playing. */
	private float playTime; 
	
	//Helper Array that's passed to the Animation.set() method.
	private Array<Event> events = new Array<Event>();
	
	/** Accepts the SpriteBatch instance where Spine skeletons are drawn, and the camera used to view the world, which allows the animations to be centered on the screen. */
	public VersusAnimation(SpriteBatch batcher, OrthographicCamera worldCamera)
	{
		//Stores the given arguments in their respective member variables.
		this.batcher = batcher;
		this.worldCamera = worldCamera;
		
		//Creates the skeleton used to display the animation of the versus animation.
		versusSkeleton = new Skeleton(assets.versusAnimSkeletonData);
		
		//Ensures that the versus animation is in its default position, so that its animations play well.
		versusSkeleton.setToSetupPose();
	}
	
	/** Draws the animation to the center of the screen. */
	public void draw(float deltaTime)
	{
		//Clears the screen with the overlay color so that the game is hidden behind the pause menu.
		//Gdx.gl.glClearColor(OVERLAY_COLOR.r, OVERLAY_COLOR.g, OVERLAY_COLOR.b, OVERLAY_COLOR.a);
		//Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		//Sets the versus animation to play at the center of the screen.
		versusSkeleton.setX(worldCamera.position.x + worldCamera.viewportWidth/2);
		versusSkeleton.setY(worldCamera.position.y + worldCamera.viewportWidth/2);
		
		System.out.println("Versus Animation Position " + versusSkeleton.getX() + ", " + versusSkeleton.getY());
		
		//Apply the 'Play' animation to the animation's skeleton. Second and third arguments specify how much time the animation has been playing, third indicates we want to 
		//loop the animation, and last is an array where any possible animation events are delegated.
		assets.versusPlay.apply(versusSkeleton, playTime, playTime, true, events);
		
		//Checks if the animation has completed. If so, switch to the player to combat mode
		checkFinished();
		
		//Updates the Skeleton in the world.
		versusSkeleton.updateWorldTransform();
		
		//Draws the box's skeleton using the universal SkeletonRenderer instance, along with the GameScreen's SpriteBatch.
		assets.skeletonRenderer.draw(batcher, versusSkeleton);
		
		//Increment the amount of time that the versus animation has been playing.
		playTime += Gdx.graphics.getDeltaTime();
	}

	/** Checks if the versus animation has finished playing. If so, the world's correct methods are delegated to switch the player to combat mode. */
	private void checkFinished() 
	{
		//If the animation is done playing
		if(playTime > assets.versusPlay.getDuration())
		{
			//Reset playTime to zero for the next time that the animation plays. Like this, the animation will restart from the beginning.
			playTime = 0;
		}
	}

	/** Plays the animation of the Versus Hud showing the Player clashing with the Zombie before entering Combat Mode. */
	public void play(Player player, Zombie zombie)
	{
		
	}
}
