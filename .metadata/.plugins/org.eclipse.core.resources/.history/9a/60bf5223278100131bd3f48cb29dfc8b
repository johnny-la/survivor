package com.jonathan.survivor.entity;

import com.jonathan.survivor.math.Cell;
import com.jonathan.survivor.math.Collider;
import com.jonathan.survivor.math.Rectangle;
import com.jonathan.survivor.math.Vector2;

/*
 * Represents an object with a collider in the world.
 */

public class GameObject 
{
	/** Stores the bottom-bottom-center position of the GameObject */
	private final Vector2 position;
	/** Stores the velocity of the gameObject the previous frame. */
	private final Vector2 oldVelocity;
	/** Stores the velocity of the GameObject */
	private final Vector2 velocity;
	/** Stores the acceleration of the GameObject */
	private final Vector2 acceleration;
	
	/** Stores the amount of time the GameObject has been in a specific state. (i.e., if the player has been jumping for 0.5 seconds, stateTime = 0.5).
	protected float stateTime;
	
	/** Stores the collider used by the GameObject for collision */
	private Collider collider;
	
	/** Stores the row and column corresponding to the layer where the GameObject resides on the TerrainLevel. */
	private Cell terrainCell;
	
	/** Creates a GameObject with a bottom-bottom-center at (0,0) and a rectangle collider with width/height of zero. */
	public GameObject()
	{
		this(0,0,0,0);
	}
	
	/** Creates a GameObject with bottom-center at (x,y) and rectangle collider with given width/height. */
	public GameObject(float x, float y, float width, float height)
	{
		position = new Vector2(x, y);
		oldVelocity = new Vector2();
		velocity = new Vector2();
		acceleration = new Vector2();
		
		//Creates a rectangle collider for the GameObject with the given width and height, positioned at the bottom-center of the GameObject.
		collider = new Rectangle(x - width/2, y - width/2, width, height);
		
		terrainCell = new Cell();
	}
	
	/** Updates the position of the GameObject according to its velocity and acceleration. */
	public void updatePosition(float deltaTime)
	{
		oldVelocity.set(velocity);
		
		velocity.add(acceleration.mul(deltaTime));
		position.add(oldVelocity.add(velocity).mul(0.5f).mul(deltaTime));
	}
	
	/** Snaps the GameObject's collider to the GameObject's position */
	public void updateCollider()
	{
		//If the collider used by the GameObject is a rectangle
		if(collider instanceof Rectangle)
			//Place the lower left position of the collider at the right point. Note that a rectangle's position is its bottom-left corner.
			collider.getPosition().set(position.x - ((Rectangle)collider).getWidth()/2, position.y - ((Rectangle)collider).getHeight()/2);
	}
	
	/** Retrieves the bottom-center position of the gameObject as a Vector2. Operations can be performed on the Vector2 using its 
	 *  instance methods, as it is mutable. */
	public Vector2 getPosition() {
		return position;
	}
	
	/** Sets the bottom-center position of the GameObject at the desired (x,y) coordinates. */
	public void setPosition(float x, float y)
	{
		position.set(x, y);
	}
	
	/** Returns the bottom-center x-position of the GameObject. */
	public float getX()
	{
		//Returns the x-position of the GameObject.
		return position.x;
	}
	
	/** Sets the center x-position of the GameObject. */
	public void setX(float x)
	{
		//Updates the center x-position of the GameObject.
		position.x = x;
	}
	
	/** Returns the bottom-center y-position of the GameObject. */
	public float getY()
	{
		//Returns the y-position of the GameObject.
		return position.y;
	}
	
	/** Sets the bottom y-position of the GameObject. */
	public void setY(float y)
	{
		//Updates the bottom y-position of the GameObject.
		position.y = y;
	}
	
	/** Retrieves the velocity of the gameObject as a Vector2. Operations can be performed on the Vector2 using its 
	 *  instance methods, as it is mutable. */
	public Vector2 getVelocity() {
		return velocity;
	}
	
	/** Sets the velocity of the GameObject at their desired (x,y) values. */
	public void setVelocity(float x, float y)
	{
		velocity.set(x, y);
	}
	
	/** Retrieves the acceleration of the gameObject as a Vector2. Operations can be performed on the Vector2 using its 
	 *  instance methods, as it is mutable. */
	public Vector2 getAcceleration() {
		return velocity;
	}
	
	/** Sets the acceleration of the GameObject at their desired (x,y) values. */
	public void setAcceleration(float x, float y)
	{
		acceleration.set(x, y);
	}

	/** Returns the collider used by the gameObject for collisions. */
	public <T extends Collider> T getCollider()
	{
		return (T)collider;
	}
	
	/** Sets the collider used by the gameObject for collisions. */
	public void setCollider(Collider c)
	{
		this.collider = c;
	}

	/** Gets the cell coordinates where the GameObject is placed on the TerrainLevel. */
	public Cell getTerrainCell() {
		return terrainCell;
	}

	/** Sets the cell coordinates where the GameObject is placed on the TerrainLevel. */
	public void setTerrainCell(int row, int col) {
		terrainCell.set(row, col);
	}
}
