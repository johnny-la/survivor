package com.jonathan.survivor.renderers;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.jonathan.survivor.TerrainLayer;
import com.jonathan.survivor.TerrainLayer.TerrainType;
import com.jonathan.survivor.TerrainLevel;
import com.jonathan.survivor.math.Rectangle;
import com.jonathan.survivor.math.Vector2;

public class TerrainRenderer 
{	
	/** Helper Rectangle instance used to test whether or not a certain TerrainLayer is viewable by the world camera. */
	private Rectangle lineBounds;
	
	/** Stores the camera where the terrain is drawn. In this case, the world camera. */
	private OrthographicCamera worldCamera;
	
	/** Stores the ShapeRenderer instance used to draw the level geometry. */
	private ShapeRenderer shapeRenderer;
	
	/** Holds the layer renderers used to render each individual TerrainLayer. Note that the array is shaped exactly like the 'layers[][]' array in the TerrainLevel. */
	private TerrainLayerRenderer[][] layerRenderers;
	
	/** Accepts the camera where the terrain lines will be drawn. */
	public TerrainRenderer(OrthographicCamera worldCamera)
	{
		//Stores the camera where the terrain lines will be drawn.
		this.worldCamera = worldCamera;
		
		//Creates the ShapeRenderer instance used to draw the level geometry with lines.
		shapeRenderer = new ShapeRenderer();
		
		//Creates the matrix of TerrainLayerRenderers, each of which is used to draw a specific TerrainLayer in the level. 
		createLayerRenderers();
		
		lineBounds = new Rectangle(); //Helper rectangle used to test if a TerrainLayer is viewable by the world camera.
		
		//Enables OpenGL ES to draw smooth lines to ensure level geometry looks anti-aliased.
		Gdx.gl.glEnable(GL10.GL_LINE_SMOOTH);
	}
	
	/** Creates the matrix of TerrainLayerRenderers, each of which is used to draw a specific TerrainLayer in the level. */
	private void createLayerRenderers() 
	{
		//Creates the TerrainLayerRenderers used to draw each individual TerrainLayer in the TerrainLevel. Note that its size is identical to the amount of layers in the TerrainLevel.
		layerRenderers = new TerrainLayerRenderer[TerrainLevel.NUM_LAYER_ROWS][TerrainLevel.NUM_LAYER_COLS];
		
		for(int i = )
	}

	/** Renders the given terrainLevel's geometry using OpenGL ES lines. */
	public void render(TerrainLevel level)
	{
		//Retrieves the TerrainLayers contained by the level. They are stored in a 2D array. These are the only layers that are visible to the user.
		TerrainLayer[][] layers = level.getTerrainLayers();
		
		//Sets the projection matrix of the ShapeRenderer to the world camera's, so that the shapes get rendered relative to world coordinates.
		shapeRenderer.setProjectionMatrix(worldCamera.combined);

		//Begins the shape rendering batch. We specify to draw lines.
		shapeRenderer.begin(ShapeType.Line);
		//Sets the line to be black.
		shapeRenderer.setColor(Color.LIGHT_GRAY);
		
		//Cycles through the rows of TerrainLayers
		for(int i = 0; i < layers.length; i++)
		{
			//Cycles through the columns of the TerrainLayers array.
			for(int j = 0; j < layers[i].length; j++)
			{
				//Stores the TerrainLayer instance that is being cycled through
				TerrainLayer layer = layers[i][j];
				
				//If the line is not inside the camera's viewable region, don't draw it.
				if(!isInCamera(layer))
				{
					continue;
				}
				
				
			}
		}
		
		//Commits the lines to the ShapeRenderer and draws them to the screen.
		shapeRenderer.end();
	}
	
	/** Returns true if the given layer is inside the viewable region of the world's camera. */
	public boolean isInCamera(TerrainLayer layer)
	{	
		//Stores the end-points of the rectangle which encompasses the TerrainLayer, found using the right and left end points of the layer.
		float x1 = layer.getLeftPoint().x;
		float y1 = layer.getLeftPoint().y;
		float x2 = layer.getRightPoint().x;
		float y2 = layer.getRightPoint().y;

		//If the given TerrainLayer is a cosine function, the height of the center of the wave has to be taken into account.
		if(layer.getTerrainType() == TerrainType.COSINE)
		{
			//Re-define the second y-value of the rectangle encompassing the layer to be the center y-value of the cosine function.
			y2 = layer.getBottomLayerHeight(layer.getCenterX());
		}
		
		//Sets the bottom left-point of the rectangle to the bottom-left point of the line.
		lineBounds.setPosition(Math.min(x1, x2), Math.min(y1, y2));
		//Finds the size the line would encapsulate as a rectangle. We denote the points as the diagonal intersector of the rectangle.
		lineBounds.setSize(Math.abs(x2 - x1), Math.abs(y2 - y1));
		
		//If the bounds of the line are inside the viewable region of the camera, return true
		if(lineBounds.insideCamera(worldCamera))
			return true;
		
		//Returns false if the line denoted as the diagonal intersector of a rectangle does not fall inside the camera.
		return false;
	}
	
	/** Called whenever the screen is resized. The argument contains the factor by which the screen had to be scaled to fit the device's screen
	 *  We have to re-scale our lines by this factor for the lines to look the same size no matter the screen. */
	public void resize(float screenScale)
	{
		//Sets the width of the OpenGL ES lines that will draw the level geometry. We take the default width at target resolution, and multiply it by the screen's scale.
		//Gdx.gl10.glLineWidth(DEFAULT_LINE_WIDTH * screenScale);
	}
}
