package com.jonathan.survivor.hud;

import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.utils.Array;

public class TiledImage 
{
	/** Stores the images which form the TileImage. */
	private Array<Image> images;
	
	/** Stores the number of rows of images in the TimeImage. */
	private int rows;
	/** Holds the number of columns in which the images are laid out in the TileImage. */
	private int cols;
	
	/** Stores the total width of the TiledImage. */
	private float width;
	/** Stores the total height of the TiledImage. */
	private float height;
	
	/** Creates a TiledImage which will have its images laid out in rows and columns.
	 * 
	 * @param regions The TextureRegions which will compose the TiledImage. 
	 */
	public TiledImage(TextureRegion ...regions)
	{
		//Cycles through the given list of TextureRegions
		for(int i = 0; i < regions.length; i++)
		{
			//Adds the TextureRegion as an image in the TiledImage. Note that all the images will be placed horizontally, right next to each other in the given order.
			add(regions[i]);
		}
	}
	
	/** Adds an image to the TiledImage. Note that the image is added in the next column, after the image which was last added to the TiledImage. */
	public void add(TextureRegion region)
	{
		//Creates a new Image instance from the given TextureRegion. 
		Image image = new Image(region);
		
		//Add the image's width to the total width of the TiledImage.
		width += image.getWidth();
		
		//Adds the image to the list of images in the TiledImage.
		images.add(image);
		
		//Positions the images in the images:Array<Image> next to each other.
		positionImages();
	}
	
	/** Skip a row. */
	public void row()
	{
		
	}
	
	/** Sets the bottom-left position of the TiledImage at the given (x,y) coordinates. */
	public void setPostion(float x, float y)
	{
		
	}
	
	/** Re-positions the images so that they are in a grid-like fashion, with the same amount of rows and columns specified in the member variables. */
	private void positionImages()
	{
		//Cycles through all the images belonging to the TiledImage.
		for(int i = 0; i < images.size; i++)
		{
			//Gets the image that is currently being cycled through.
			Image image = images.get(i);
			
			//If there are currently images placed in the TiledImage
			if(images.size != 0)
			{
				//Retrieve the image that was added to the TileImage right before the one that was just created.
				Image previousImage = images.get(images.size-1);
				
				//Place the created image right next to the previous image.
				image.setX(previousImage.getX() + previousImage.getWidth());
				//Places the image at the same y-position as the previous image.
				image.setY(previousImage.getY());
			}
		}
	}

	/** Retrieves the total width of the TiledImage. */
	public float getWidth() {
		return width;
	}

	/** Sets the total width of the TiledImage. */
	public void setWidth(float width) {
		this.width = width;
	}

	/** Retrieves the total height of the TiledImage. */
	public float getHeight() {
		return height;
	}

	/** Sets the total height of the TiledImage. */
	public void setHeight(float height) {
		this.height = height;
	}
	
}
