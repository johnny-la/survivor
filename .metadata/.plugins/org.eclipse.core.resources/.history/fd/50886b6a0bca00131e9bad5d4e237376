package com.jonathan.survivor.renderers;

import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Pool;
import com.jonathan.survivor.Assets;
import com.jonathan.survivor.TerrainLayer;
import com.jonathan.survivor.TerrainLayer.TerrainType;
import com.jonathan.survivor.math.Vector2;

/** 
 * Stores and positions pools of sprites which forms the shape of a TerrainLayer.
 *
 */

public class TerrainLayerRenderer 
{
	/** Stores the row of the TerrainLayer that this Renderer is drawing. */
	private int row;
	/** Stores the column of the TerrainLayer that this Renderer is drawing. */
	private int col;
	
	/** Stores the array of all the sprites which are currently being rendered by this instance. These are the sprites which are used to draw the TerrainLayers of the level. */
	private Array<Sprite> sprites;
	
	/** Holds the TerrainSpritePool which pools all of the unused sprites which render the shape of a TerrainLayer. */
	private TerrainSpritePool spritePool;
	
	/** Creates the TerrainSpriteRenderer used to position and pool sprites used to form the ground of the TerrainLayers. */
	public TerrainLayerRenderer()
	{
		//Creates the Array which holds all of the currently-active sprites being rendered by the renderer to form the level's TerrainLayers.
		sprites = new Array<Sprite>();
		
		//Creates a new TerrainSpritePool, which pools all of the sprites which will be re-cycled when needed.
		spritePool = new TerrainSpritePool();
	}
	
	/** Makes the sprites in this renderer update to form the shape of the given TerrainLayer. */
	public void update(TerrainLayer layer)
	{		
		//If the TerrainType of the layer is not COSINE, the layer type is either CONSTANT or LINEAR. That means that the layer's geometry can be modeled 
		//using a straight line. Thus, form a straight line with sprites.
		if(layer.getTerrainType() != TerrainType.COSINE)
		{
			//Update the sprites of this renderer so that they form a linear line following the shape of the given TerrainLayer.
			updateLinear(layer);
		}
		//Else, if we are here, the TerrainLayer has the geometry of a cosine function. Thus, draw the layer using a series of lines to model a cosine function.
		else
		{
			//Makes the sprites of this renderer take the shape of the given cosine layer.
			updateCosine(layer);
		}
	}

	/** Update the sprites of this renderer so that they form a linear line following the shape of the given TerrainLayer. */
	private void updateLinear(TerrainLayer layer) 
	{
		//Stores the bottom left and right end-points of the TerrainLayer using the methods TerrainLayer.getLeft/RightPoint():Vector2.
		Vector2 leftEndPoint = layer.getLeftPoint();
		Vector2 rightEndPoint = layer.getRightPoint();
		
		//Draw a straight line going from the right end point to the left end point of the TerrainLayer. This draws the bottom portion of the layer since
		//the end points specify the position for the bottom of the layer.
		shapeRenderer.line(rightEndPoint.x, rightEndPoint.y, leftEndPoint.x, leftEndPoint.y);
		
		//If we are cycling through the last row of the layers array, we have reached the top-most layer. Thus, draw the top portion of the layer. It wasn't
		//necessary to do so before because the top-portion of the previous layers were drawn by the bottom portions of the next layers.
		if(i == layers.length-1)
			//Draws the top portion of the layer by drawing a line from the left end point to the right end point and off-setting it up by the layer height.
			shapeRenderer.line(rightEndPoint.x, rightEndPoint.y + TerrainLayer.LAYER_HEIGHT, leftEndPoint.x, leftEndPoint.y + TerrainLayer.LAYER_HEIGHT);
	}
	
	/** Updates the sprites in this renderer to follow the shape of the given COSINE TerrainLayer. */
	private void updateCosine(TerrainLayer layer)
	{		
		//Stores the bottom left and right end-points of the TerrainLayer using the methods TerrainLayer.getLeft/RightPoint():Vector2.
		Vector2 leftEndPoint = layer.getLeftPoint();
		Vector2 rightEndPoint = layer.getRightPoint();
		
		//Cycles from the x-position of the layer's left end-point, to the right-most x-position of the layer. 
		for(float x = leftEndPoint.x; x < rightEndPoint.x; )
		{
			//Retrieves a sprite from the SpritePool used to 
			Sprite sprite = spritePool.obtain();
			
			//Stores the x-position of left-end of the segment. This is the x-position that the outer 'for' loop is cycling through.
			float x1 = x;
			//Stores the y-position of the left-end of the segment. Found by finding the height of the bottom of the layer at the point's x-position.
			float y1 = layer.getBottomLayerHeight(x);
			
			//Finds the x-position of the right-end of the segment simply by adding a segment width to the left-end's x-position.
			float x2 = x1 + segmentWidth;
			
			//Stores the y-position of the right-end of the segment. Found by finding the height of the bottom of the layer at the point's x-position.
			float y2 = layers[i][j].getBottomLayerHeight(x2);
			
			//If the line is not inside the camera's viewable region, don't draw it. The two-end points of the line are accepted as arguments.
			/*if(!isInCamera(x1, y1, x2, y2))
			{
				continue;
			}*/

			//Draws a segment of the bottom of the cosine function. Renders a line going from the left-end segment to the right-end. Note that the y-value
			//of the segment is found using 'TerrainLayer.getBottomLayerHeight()'. We take the bottom height since we are drawing the bottom layer portion.
			shapeRenderer.line(x1, y1, x2, y2);
			
			//If we are cycling through the last row of the layers array, we have reached the top-most layer. Thus, draw the top portion of cosine function.
			//It wasn't necessary to do so before because the top-portion of the previous layers were drawn by the bottom portions of the next layers.
			if(i == layers.length-1)
				//Draws the top portion of the layer by drawing the cosine line segment from the left-end point of the segment to its right end-point and.
				//Note that the y-value of the segment is found using 'TerrainLayer.getTopLayerHeight()'. We take the top height since we are drawing 
				//the top portion of the layer.
				shapeRenderer.line(x1, layers[i][j].getTopLayerHeight(x1), x2, layers[i][j].getTopLayerHeight(x2));
		}
	}

	/** A pool which holds Sprites used to draw the layers in a TerrainLevel. */
	private class TerrainSpritePool extends Pool<Sprite>
	{

		/** Returns a random new sprite when none are free in the pool. */
		@Override
		protected Sprite newObject() 
		{
			//Stores the Sprite which will be created and returned by this method.
			Sprite sprite = null;
		
			//Creates a random number between 0 and 3 to determine the look of the tile.
			int type = (int)(Math.random()*4);
			
			//Switches the type of sprite to choose. Allows the TerrainLevel's groud sprites to look different. Uses template sprites from the Assets singleton.
			switch(type)
			{
			case 0:
				sprite = new Sprite(Assets.instance.snow1);
				break;
			case 1:
				sprite = new Sprite(Assets.instance.snow2);
				break;
			case 2:
				sprite = new Sprite(Assets.instance.snow3);
				break;
			case 3:
				sprite = new Sprite(Assets.instance.snow4);
				break;
			default:
				sprite = new Sprite(Assets.instance.snow4);
				break;
			}
			
			//Returns the created tile sprite.
			return sprite;
		}	
	}
	
	/** Returns the row of the TerrainLayer that this renderer is drawing. */
	public int getRow() {
		return row;
	}

	/** Sets the row of the TerrainLayer that this renderer is drawing. */
	public void setRow(int row) {
		this.row = row;
	}

	/** Returns the column of the TerrainLayer that this renderer is drawing. */
	public int getCol() {
		return col;
	}

	/** Sets the column of the TerrainLayer that this renderer is drawing. */
	public void setCol(int col) {
		this.col = col;
	}
}
