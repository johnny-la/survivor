package com.jonathan.survivor.managers;

import com.jonathan.survivor.World;
import com.jonathan.survivor.entity.Human.Direction;
import com.jonathan.survivor.entity.Human.Mode;
import com.jonathan.survivor.entity.Human.State;
import com.jonathan.survivor.entity.Player;
import com.jonathan.survivor.entity.Zombie;

/*
 * Updates a zombie, along with his artificial intelligence. Helper class to separate zombie updating from the World class.
 */

public class ZombieManager 
{
	/** Stores the amount of time the zombie stays idle before starting to move again (in EXPLORATION mode). */
	private static final float IDLE_TIME_EXPLORATION = 3;
	
	/** Holds the x-distance between the zombie and the player so that the zombie can first see the player. */
	private static final float ZOMBIE_VIEW_DISTANCE = 7f;
	
	/** Stores the minimum x-distance between the zombie and the player so that the zombie will continue to follow him. */
	private static final float FOLLOW_DISTANCE = 20f;
	
	/** Stores the x-distance between the zombie and the player so that the zombie can see the player even when he's in back of the zombie. */
	private static final float ZOMBIE_BACK_VIEW = 2.5f;
	
	/** Stores the amount of time the zombie stays idle before choosing a move to attack the player (in COMBAT mode). */
	private static final float IDLE_TIME_COMBAT = 3;
	
	/** Holds the World instance that the zombies are a part of. Used to access the convenience methods created for the player and needed for the zombies. */
	private World world;
	
	/** Creates a ZombieManager which updates zombies and their AI. Accepts the World instance used by the game in order to access the convenience methods
	 *  used by the player and similarly needed to update zombies.s
	 */
	public ZombieManager(World world)
	{
		//Stores the given constructor arguments in their respective member variables.
		this.world = world;
	}
	
	/** Updates the game logic for the given zombie. */
	public void update(Zombie zombie, float deltaTime) 
	{
		//If the zombie is in EXPLORATION mode
		if(zombie.getMode() == Mode.EXPLORING)
		{
			//Updates the zombie's AI in exploration mode before updating its game logic.
			updateAIExploring(zombie, deltaTime);
			
			//Delegate the update call to the 'updateExploring()' method.
			updateExploring(zombie, deltaTime);
		}
		//Else, if the zombie is in COMBAT mode
		else if(zombie.getMode() == Mode.COMBAT)
		{
			//Updates the zombie's AI in combat mode before updating its game logic.
			updateAICombat(zombie, deltaTime);
			
			//Delegate the update call to the 'updateCombat()' method.
			updateCombat(zombie, deltaTime);
		}
		
		//Updates the position of the zombie based on his velocity. Also updates its collider's position.
		zombie.update(deltaTime);
	}

	/** Updates the game logic of the given zombie when he is in EXPLORING state. */
	private void updateExploring(Zombie zombie, float deltaTime) 
	{
		//Check collisions with the zombie.
		checkCollisions(zombie);
		
		//If the zombie is in idle state
		if(zombie.getState() == State.IDLE)
		{
			
		}
		//Else, if the zombie is walking
		else if(zombie.getState() == State.WALK)
		{
			//If the zombie is walking to the right
			if(zombie.getDirection() == Direction.RIGHT)
			{
				//Apply a positive x-velocity to the zombie using the predefined zombie's walking speed.
				zombie.setVelocity(zombie.getWalkSpeed(), 0);
			}
			//Else, if the zombie is walking to the left
			else
			{
				//Apply a negative x-velocity to the zombie using the predefined zombie's walking speed.
				zombie.setVelocity(-zombie.getWalkSpeed(), 0);
			}
			
			//Checks if the zombie switched layers by either moving to the right or left of his current layer. If so, we move the zombie over by a cell.
			world.checkForLayerSwitch(zombie);
			
			//Ensures the zombie is always at ground height.
			world.lockToGround(zombie);
		}
		
	}
	
	/** Updates the zombie's state according to the principles of his artifical intelligence. Called when the zombie is in Exploration mode. */
	private void updateAIExploring(Zombie zombie, float deltaTime) 
	{
		//If deltaTime is zero, the game is paused. Thus, don't compute AI for this render call.
		if(deltaTime == 0)
			return;
		
		//If the zombie is in IDLE state (i.e., he is just standing there)
		if(zombie.getState() == State.IDLE)
		{
			//If the zombie has been in IDLE state for long enough, make him move again.
			if(zombie.getStateTime() > IDLE_TIME_EXPLORATION)
			{
				//If the zombie was facing the left when idle
				if(zombie.getDirection() == Direction.LEFT)
				{
					//Make the zombie walk to the right
					world.walk(zombie, Direction.RIGHT);
				}
				//Else, if the zombie was facing to the right when idle
				else 
				{
					//Make the zombie walk left.
					world.walk(zombie, Direction.LEFT);
				}
			}
			
			//Checks if the player is close to the zombie. If so, the zombie is alerted.
			checkPlayerProximity(zombie);
			
		}
		//If the zombie is currently walking
		if(zombie.getState() == State.WALK)
		{
			//If the zombie is close to the edge of his TerrainLayer, and has been walking for more than one second (Assures that the zombie doesn't stop walking)
			if(world.closeToLayerEdge(zombie) && zombie.getStateTime() > 1f)
			{
				//Tell the zombie to stop walking. We want the zombie to stay within the confines of his designated layer.
				world.stopMoving(zombie);
			}
			
			//Checks if the player is close to the zombie. If so, the zombie is alerted.
			checkPlayerProximity(zombie);
		}
		
	}
	
	/** Updates the zombie when he is in COMBAT mode and fighting the player. */
	private void updateCombat(Zombie zombie, float deltaTime) 
	{
		//If the zombie is in IDLE state
		if(zombie.getState() == State.IDLE)
		{
			
		}
		//Else, if the zombie is walking or charging, make him walk.
		else if(zombie.getState() == State.WALK || zombie.getState() == State.CHARGE)
		{
			//If the zombie is walking to the right
			if(zombie.getDirection() == Direction.RIGHT)
			{
				//Apply a positive x-velocity to the zombie using the predefined zombie's walking speed.
				zombie.setVelocity(zombie.getWalkSpeed(), 0);
			}
			//Else, if the zombie is walking to the left
			else
			{
				//Apply a negative x-velocity to the zombie using the predefined zombie's walking speed.
				zombie.setVelocity(-zombie.getWalkSpeed(), 0);
			}
			
			//Ensures the zombie is always at ground height.
			world.lockToGround(zombie);
		}		
		//Else, if the zombie was hit by the player
		else if(zombie.getState() == State.HIT)
		{
			//Make the zombie stop moving until his HIT animation finishes
			world.stopMoving(zombie);
			
			//Set the zombie back to HIT state, since the stopMoving function unwantingly set his state to IDLE.
			zombie.setState(State.HIT_HEAD);
		}
		//Else, if the zombie has been hit in the head
		else if(zombie.getState() == State.HIT_HEAD)
		{
			//Make the zombie stop moving until his HIT_HEAD animation finishes
			world.stopMoving(zombie);
			
			//Set the zombie back to HIT_HEAD state, since the stopMoving function unwantingly set his state to IDLE.
			zombie.setState(State.HIT_HEAD);
		}
	}

	/** Updates the zombie's state according to the principles of his artifical intelligence. Called when the zombie is in COMBAT mode. */
	private void updateAICombat(Zombie zombie, float deltaTime) 
	{
		//If deltaTime is zero, the game is paused. Thus, don't compute AI for this render call.
		if(deltaTime == 0)
			return;
		
		//If the zombie is in IDLE state (i.e., he is just standing there)
		if(zombie.getState() == State.IDLE)
		{
			//If the zombie has been idling for long enough
			if(zombie.getStateTime() > IDLE_TIME_COMBAT)
			{
				//Make the zombie choose his next move to attack the player
				chooseNextMove(zombie);
			}
			
		}
		//If the zombie is currently in WALK state, he should be walking back to his start position.
		else if(zombie.getState() == State.WALK)
		{
			//Moves the zombie to his start position.
			moveToStart(zombie);
		}
		//Else, if the zombie is charging at the player
		else if(zombie.getState() == State.CHARGE)
		{
			//Makes the zombie spawn at the right edge of the level once he reaches the left edge.
			checkLevelBoundaries(zombie);
		}
		
	}

	/** Make the zombie charge towards the player. */
	private void charge(Zombie zombie) 
	{
		//Play the CHARGE_START animation for the zombie. Once it is done, the zombie switches to CHARGE state to ram the player.
		zombie.setState(State.CHARGE_START);		
	}
	
	/** Makes the given zombie choose the next move to attack the player with. */
	private void chooseNextMove(Zombie zombie) 
	{
		//Generate a random number to choose the next move.
		float randomFloat = (float)Math.random();
		
		if(randomFloat > 0.0f)
		{
			//Make the zombie charge towards the player.
			charge(zombie);
		}
	}

	/** Checks if the zombie has intersected with any GameObject which is pertinent to the zombie, such as the player. */
	private void checkCollisions(Zombie zombie)
	{
		//If the zombie is dead, or the player has won the game, the zombie's collisions are irrelevant.
		if(zombie.getState() == State.DEAD || world.getPlayer().getState() == State.TELEPORT)
			//Therefore, return the method.
			return;

		//Gets the Player being controlled in the world for collision checking.
		Player player = world.getPlayer();

		//If the zombie has intersected with the player
		if(zombie.getCollider().intersects(player.getCollider()))
		{
			//Tell the player to fight this zombie once entering combat mode.
			player.setZombieToFight(zombie);
			
			//Plays the versus animation, showing the player brawling against the zombie. When finished, the player switches to combat mode against the zombie.
			world.playVersusAnimation();
		}
	}
	
	/** Moves the zombie back to his starting position. */
	private void moveToStart(Zombie zombie) 
	{
		//Gets the starting x-position of the zombie
		float startingPoint = world.getCombatLevel().getZombieStartX();
		
		//If the zombie is already at his starting point
		if(zombie.getX() == startingPoint)
		{
			//Therefore, stop the zombie, since he has reached his starting point.
			world.stopMoving(zombie);
			
			//Make the zombie face left towards the player.
			zombie.setDirection(Direction.LEFT);
		}
		
		//If the starting point is to the left of the zombie
		if(startingPoint < zombie.getX())
		{
			//If the zombie was walking to the right, and the zombie is to the right of his objective, he has reached walked past his starting point.
			if(zombie.getDirection() == Direction.RIGHT)
			{
				//Therefore, stop the zombie, since he has reached his starting point.
				world.stopMoving(zombie);
				
				//Make the zombie face left towards the player.
				zombie.setDirection(Direction.LEFT);
				
				//Snap the zombie to his starting point
				zombie.setX(startingPoint);
			}
			//Else, if the player has not reached his starting point, make him continue walking.
			else
			{
				//Make the zombie walk to the left, towards his starting position.
				world.walk(zombie, Direction.LEFT);
			}
		}
		//Else, if the starting point is to the right of the zombie
		else if(startingPoint > zombie.getX())
		{
			//If the zombie was walking to the left, and the zombie is to the left of his objective, he has reached walked past his starting point.
			if(zombie.getDirection() == Direction.LEFT)
			{
				//Therefore, stop the zombie, since he has reached his starting point.
				world.stopMoving(zombie);
				
				//Snap the zombie to his starting point
				zombie.setX(startingPoint);
			}
			//Else, if the player has not reached his starting point, make him continue walking.
			else
			{
				//Make the zombie walk to the right, towards his starting position.
				world.walk(zombie, Direction.RIGHT);
			}
		}
		
		
	}
	
	/** Checks if the zombie is within the confines of the combat level. If not, the zombie is respawned at the right place. */
	private void checkLevelBoundaries(Zombie zombie) 
	{
		//If the zombie has past the left edge of the level
		if(world.getCombatLevel().isPastLeftEdge(zombie))
		{
			//Spawn the zombie at the right edge of the level.
			zombie.setX(world.getCombatLevel().getRightPoint().x);
			
			//Set the zombie to WALK state. He will then know to walk back to his starting position
			zombie.setState(State.WALK);
		}
		
	}

	/** Sets the zombie to ALERT state if the zombie is not already alerted. */
	private void checkPlayerProximity(Zombie zombie)
	{
		//If the zombie can see the player, and the zombie isn't already alerted
		if(zombieSeesPlayer(zombie) && zombie.isAlerted() == false)
		{
			//Stop the zombie from walking until his ALERTED animation finishes playing.
			world.stopMoving(zombie);
			
			//Alert the zombie that the player is close. Makes the zombie go to ALERTED state and walk towards the player.
			zombie.setAlerted(true);
		}
		//Else, if the zombie is already alerted of the player's presence
		else if(zombie.isAlerted())
		{
			//If the zombie is IDLE and is alerted, the zombie has just finished his ALERTED animation, and should follow the player.
			if(zombie.getState() == State.IDLE)
			{
				//Makes the zombie walk towards the player, since the zombie has been alerted.
				followPlayer(zombie);
			}
			//Else, if the zombie is walking, the zombie is following the player. Thus, make a few logic checks.
			else if(zombie.getState() == State.WALK)
			{
				//If the zombie can still follow the player, and is within viewing distance
				if(canFollowPlayer(zombie))
				{
					//Continue to make the zombie walk towards the player.
					followPlayer(zombie);
				}
				//Else, if the zombie can no longer see the player and follow him
				else
				{					
					//Tell the zombie that he is no longer alerted. He will no longer follow the player, but rather follow his regular back-and-forth walking pattern.
					zombie.setAlerted(false);
				}
			}
			
		}
		
	}
	
	/** Makes the zombie walk towards the player to essentially follow him. */
	private void followPlayer(Zombie zombie) 
	{
		//Gets the Player being controlled in the world.
		Player player = world.getPlayer();
		
		//If the zombie is facing the player, make him walk in the direction he is already facing.
		if(zombie.isFacing(player))
		{
			//Make the zombie walk in his current direction, since he is already facing the player.
			world.walk(zombie, zombie.getDirection());
		}
		//Else, if the zombie is not facing the player
		else 
		{
			//Make the zombie walk in the opposite direction in order to follow the player.
			world.walk(zombie, (zombie.getDirection() == Direction.RIGHT)? Direction.LEFT:Direction.RIGHT);
		}
		
	}
	
	/** Returns true if the zombie sees the player in the world. */
	private boolean zombieSeesPlayer(Zombie zombie)
	{
		//Gets the Player being controlled in the world.
		Player player = world.getPlayer();
		
		//If the zombie is already alerted of the player's presence, and the zombie is within following distance of the player, make the zombie follow the player.
		if(zombie.isAlerted() && canFollowPlayer(zombie))
		{
			
		}
		
		//If the zombie is facing the player, and the player is close to the zombie, the zombie is alerted of his presence
		if(zombie.isFacing(player) && isClose(player, zombie))
		{
			return true; //Return true, since the zombie can be alerted of the player.
		}
		//Else, if the player is very close to the zombie, the zombie can see him, even if he isn't facing the player.
		else if(isVeryClose(player, zombie))
		{
			return true; //Return true, since the zombie can be alerted of the player.
		}
		
		return false; //If this statement is reached, the zombie cannot be alerted of the player.
	}
	
	/** Returns true if the given zombie is already following the player, and can continue to follow him. The player has to be within a given distance from the zombie. */
	private boolean canFollowPlayer(Zombie zombie) 
	{
		//Gets the Player being controlled in the world.
		Player player = world.getPlayer();
		
		//If the player and the zombie are within FOLLOW_DISTANCE, the player is close enough to the zombie for the zombie to continue following him.
		if(Math.abs(player.getX() - zombie.getX()) < FOLLOW_DISTANCE)
		{
			//The zombie can only be deemed close to the player if they are both on the same row.
			if(player.getTerrainCell().getRow() == zombie.getTerrainCell().getRow())
			{
				return true; //Return true, since the player is close enough to the zombie to be followed.
			}
		}
		
		//If this statement is reached, the player is too far from the zombie to be followed.
		return false;
	}

	/** Returns true if the player is close to the given zombie. */
	private boolean isClose(Player player, Zombie zombie)
	{		
		//If the player and the zombie are within ZOMBIE_ALERT_DISTANCE, the player is close to the zombie. Note that x-positions are compared.
		if(Math.abs(player.getX() - zombie.getX()) < ZOMBIE_VIEW_DISTANCE)
		{
			//The zombie can only be deemed close to the player if they are both on the same row.
			if(player.getTerrainCell().getRow() == zombie.getTerrainCell().getRow())
			{
				return true; //Return true, since the player is close to the zombie.
			}
		}
		
		//If this statement is reached, the player is far from the zombie.
		return false;
	}
	
	/** Returns true if the player is very close to the zombie, and the zombie can even see the player from in back of him. */
	private boolean isVeryClose(Player player, Zombie zombie)
	{
		//If the player and the zombie are within ZOMBIE_BACK_VIEW, the player is very close to the zombie. 
		if(Math.abs(player.getX() - zombie.getX()) < ZOMBIE_BACK_VIEW)
		{
			//The zombie can only be deemed close to the player if they are both on the same row.
			if(player.getTerrainCell().getRow() == zombie.getTerrainCell().getRow())
			{
				return true; //Return true, since the player is very close to the zombie.
			}
		}
		
		//If this statement is reached, the player is not very close to the zombie.
		return false;
	}
	
}