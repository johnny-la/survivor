package com.jonathan.survivor;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton.ImageButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.List.ListStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;
import com.badlogic.gdx.utils.Array;
import com.esotericsoftware.spine.Animation;
import com.esotericsoftware.spine.SkeletonData;
import com.esotericsoftware.spine.SkeletonJson;
import com.esotericsoftware.spine.SkeletonRenderer;

/** Loads all visual/audio assets needed by the game and stores them in public static variables. An asset is fetched from this class whenever something needs
 *  to be drawn on screen or played to the speakers.
 * @author Jonathan
 *
 */

/* A TextureAtlas is created by passing the .txt file of the atlas created by TexturePacker.
 * A sprite is retrieved from this atlas using the TextureAtlas.createSprite("Name of Sprite"):Sprite method.
 * A texture is retrieved from the atlas using TextureAtlas.findTexture("Name of Texture"):AtlasTexture.
 * 
 * Fonts are loaded from a True-Type font using new FreeTypeFontGenerator("font.ttf").  Then, a BitmapFont is created from the .tff using generator.generateFont(size:int). 
 * Note that each font has a default size. Every label is placed in the world with this default size in mind. However, depending on the screen size, We want to choose a larger
 * size. Let's say the device is two times larger than our target resolution. In that case, we choose a two times larger font by multiplying the default size by fontScale:float.
 * Then, we take the font, and scale it down by the same font scale. Like this, the labels using this font are still the same size. We don't have to use a different coordinate
 * system. However, the quality remains good no matter the screen size.
 * 
 * A Drawable is retrieved from a Skin using Skin.getDrawable("Name"), which returns the Drawable for the sprite in the atlas with the given name. For instance, buttonStyle.up
 * = Skin.getDrawable("button_up") sets the 'up' state of a button to display the sprite with name "button_up" inside the texture atlas registered to the skin.
 * 
 */

public class Assets 
{
	public static final Assets instance = new Assets();	//Stores a singleton instance of the Assets class. All assets are loaded and stored in one instance for easy access.
	private AssetManager manager = new AssetManager();	//Stores an AssetManager instance. This allows for loading on a separate thread from the render thread. All assets are loaded through
														//object.
	
	/** Stores a file extension (i.e., "@4x", "@2x", "")  telling us which atlases to load depending on screen size. */
	public final String scaleExtension;	
	/** Stores the scale of the textures relative to the @1x textures (i.e., 4, 2, or 1). We downscale the sprites by this scale so that they take the same space as the @1x textures, to 
	 * avoid re-scaling our coordinate system. */
	public final int scaleFactor;	
	/** Stores the amount we scale our fonts by. If this is two, we choose a font size that is two times larger than default. In this case, it means the screen is two times larger than our
	 *  target resolution, for which the default font size was catered to. Thus, we need a larger font size to compensate. */
	public final float fontScale;
	
	/** Stores the amount the skeletons must be scaled in order to fit the world coordinates. This is done because the skeletons were made with larger textures than are used. The first
	 * float is the ratio of size of the skeleton using @1x textures compared to the size of the skeleton in Spine. World scale converts the skeleton's size from pixels to meters. */
	public static final float PLAYER_SKELETON_SCALE = 0.156f * Survivor.WORLD_SCALE;
	public static final float TREE_SKELETON_SCALE = 0.25f * Survivor.WORLD_SCALE;
	
	//Stores the assets used by the loading screen and company splash screen.
	public TextureAtlas loadingScreenAtlas;
	public Sprite companyLogo;
	public Sprite loadingText;
	public Array<Sprite> preloaderSprites;
	
	//Stores the assets used by the main menu screen.
	public TextureAtlas mainMenuAtlas;
	private FreeTypeFontGenerator moonFlowerBoldGenerator;
	public BitmapFont moonFlowerBold_54;
	public BitmapFont moonFlowerBold_38;
	
	public Skin mainMenuSkin;	//We register an atlas to this skin (the main menu atlas). This lets us retrieve sprites from the atlas to use with 2D widgets.
	public TextButtonStyle mainMenuButtonStyle;	//Defines the look of main menu buttons
	public LabelStyle mainMenuHeaderStyle;	//Defines the look of the headers in the main menu.
	public ListStyle mainMenuListStyle;	//Defines the look of the world selection list in the main menu.
	
	//Stores the assets used by the game.
	public TextureAtlas hudAtlas;
	public Skin hudSkin;
	public ButtonStyle circleButtonStyle;
	public ImageButtonStyle leftArrowButtonStyle;
	public ImageButtonStyle rightArrowButtonStyle;
	public ButtonStyle backpackButtonStyle;
	
	public TextButtonStyle survivalGuideButton;
	
	public TextureAtlas playerAtlas;
	public SkeletonJson playerSkeletonJson;
	public SkeletonData playerSkeletonData;
	//public Slot axeSlot;
	//public Attachment axeAttachment;
	public Animation playerIdle;
	public Animation playerWalk;
	public Animation playerJump;
	public Animation playerFall;
	public Animation playerChopTree;
	public Animation playerChopTree_Start;
	
	public TextureAtlas treeAtlas;
	public SkeletonJson treeSkeletonJson;
	public SkeletonData treeSkeletonData;
	public Animation treeIdle;
	public Animation treeClicked;
	public Animation treeHit;
	public Animation treeScavenged;
	
	public SkeletonRenderer skeletonRenderer; //Renderer used to draw spine skeletons with a SpriteBatch.
	
	//Stores the music used by the application.
	public Music mainMenuMusic;
	
	//Stores the sounds used by the application.
	public Sound buttonClick;
	public Sound swoosh;
	
	
	public Assets()
	{
		//Finds the amount we have to scale the width and height of the viewport to fit the device. To do this, we take the screen width/height, and divide it by the
		//DEFAULT_GUI_WIDTH/HEIGHT. These constants store the target resolution of the app. Thus, if we are on a 1920x1080 device, and the target resolution is 480x320,
		//scaleX = 1920/480 = 4, and scaleY = 3.4. Thus, since all our default textures are scaled for 480x320, it means we have to take the @4x sprites to make the 
		//textures look crisp.
		float scaleX = Gdx.graphics.getWidth() / Survivor.DEFAULT_GUI_WIDTH;
		float scaleY = Gdx.graphics.getHeight() / Survivor.DEFAULT_GUI_HEIGHT;
		
		//Compute the amount we scale our fonts by. We choose the minimum of scaleX and Y so that we don't scale the fonts excessively large to prevent large texture sizes.
		//This float will usually be between 1 and 4, depending on how large the device is.
		fontScale = Math.min(scaleX, scaleY);
		
		//If the maximum scale difference between target resolution and screen dimensions is >= 4, we scale up our textures by four by choosing the @4x texture atlases.
		//Note that we choose the maximum of the two scales to choose the larger textures more often.
		if(Math.max(scaleX, scaleY) >= 4)
		{
			//Assign a scale extension of @4x, and a scale factor of 4, since our textures should be four times larger than default.
			scaleExtension = "@4x";
			scaleFactor = 4;
		}
		//If the maximum scale difference between target resolution and screen dimensions is >= 2, we scale our textures two times by choosing the @2x texture atlases.
		else if(Math.max(scaleX, scaleY) >= 2)
		{
			//Assign a scale extension for image files of @2x and a scale factor of 2, since our textures should be two times larger than default.
			scaleExtension = "@2x";
			scaleFactor = 2;
		}
		//Else, if the actual screen size is not more than two times larger, choose the default texture atlases, made to look crisp on small screens.
		else
		{
			//Assign an empty scale extension, so that we choose the @1x texture atlases. Assign a scale factor of '1' since our textures are not scaled.
			scaleExtension = "";
			scaleFactor = 1;
		}
		
		//Queue all of the assets for loading. We have to queue assets inside the AssetManager instance before actually loading them.
		queueAssetsForLoading();
	}
	
	/** Loads the assets used by the company splash screen and the loading screen. We need to load their assets first before going to the loading screen
	 *  and loading the all of the assets.
	 */
	public void loadInitialAssets()
	{
		//Loads the atlases and sprites used by the loading screen and company splash screens.
		loadingScreenAtlas = new TextureAtlas(Gdx.files.internal("ui/loading screen/loading_items_atlas" + scaleExtension + ".txt"));
		companyLogo = loadingScreenAtlas.createSprite("Company Logo");
		loadingText = loadingScreenAtlas.createSprite("Loading Text");
		preloaderSprites = loadingScreenAtlas.createSprites("Preloader");
		
		//Resize the sprites according to the scale factor of the screen. That is, if we are using an @2x texture atlas, scaleFactor=2. So, reduce the sprites
		//to half their size so that they are the same size as the original @1x textures. Like this, coordinate systems stay the same no matter the texture 
		//resolution.
		companyLogo.setSize(companyLogo.getWidth()/scaleFactor, companyLogo.getHeight()/scaleFactor);
		loadingText.setSize(loadingText.getWidth()/scaleFactor, loadingText.getHeight()/scaleFactor);
		Sprite preloaderSprite;
		for(int i = 0; i < preloaderSprites.size; i++)
		{
			preloaderSprite = preloaderSprites.get(i);
			preloaderSprite.setSize(preloaderSprite.getWidth()/scaleFactor, preloaderSprite.getHeight()/scaleFactor);
		}
		
	}
	
	/** Queues all assets for loading. Loading is performed every time the updateLoading() method is called. Before calling updateLoading(), the AssetManager must know
	 *  which assets to load. This method puts all assets to queue inside the AssetManager instance.
	 */
	private void queueAssetsForLoading()
	{
		//Queues the main menu's assets for loading.
		queueMainMenuAssets();
		
		//Queues the game's assets for loading.
		queueGameAssets();
	}
	
	/** Queues the main menu's assets for loading. Loading is performed every time the updateLoading() method is called. Before calling updateLoading(), the AssetManager
	 *  which assets to load. This method puts all main menu assets assets to queue inside the AssetManager instance.
	 */
	public void queueMainMenuAssets()
	{
		//Put all assets to queue for loading using the AssetManager.load("fileName", class) method.
		manager.load("ui/main menu/atlas/main/main_menu_atlas" + scaleExtension + ".txt", TextureAtlas.class);
		
		//Puts music assets to queue inside the AssetManager using AssetManager.load("fileName", class).
		//manager.load("sound/music/Ashton Manor.mp3", Music.class);
		
		//Puts sound assets to queue for loading inside the AssetManager using AssetManager.load("fileName", class).
		manager.load("sound/sfx/ui/ButtonClick.ogg", Sound.class);
		manager.load("sound/sfx/ui/Swoosh.ogg", Sound.class);
	}
	
	/** Queues the game's assets for loading. Loading is performed every time the updateLoading() method is called. Before calling updateLoading(), the AssetManager which
	 *  assets to load. This method puts all game assets assets to queue inside the AssetManager instance.
	 */
	private void queueGameAssets()
	{
		//Put all assets to queue for loading using the AssetManager.load("fileName", class) method.
		manager.load("game/player/atlas/player_atlas" + scaleExtension + ".txt", TextureAtlas.class);
		manager.load("game/tree/atlas/tree_atlas" + scaleExtension + ".txt", TextureAtlas.class);
		manager.load("ui/hud/atlas/hud_atlas" + scaleExtension + ".txt", TextureAtlas.class);
		
		//Puts music assets to queue inside the AssetManager using AssetManager.load("fileName", class).
		
		//Puts sound assets to queue for loading inside the AssetManager using AssetManager.load("fileName", class).
	}
	
	/** Call every frame inside a render() method to load the assets stored inside the AssetManager instance. This performs loading on a separate thread so that the render() 
	 *  method which calls this method can also update its appearance.
	 * @return Returns true if the loading is complete.
	 */
	public boolean updateLoading()
	{
		//Calls the manager.update() method, which loads the assets queued inside this AssetManager instance. The assets were queued in queueAssetsForLoading(). The method
		//returns true if the loading is complete.
		boolean loadingComplete = manager.update();
		
		//If the loading is complete
		if(loadingComplete)
			//Store the loaded assets into the object's local variables. Like this, any class can easily get a hold of all assets using the Assets singleton.
			storeLoadedAssets();
		
		//Return true if the loading has completed.
		return loadingComplete;
	}
	
	/** Stores the assets loaded from the AssetManager into their respective member variables. Like this, any class with access to the singleton can easily access the assets
	 *  loaded from this class. */
	private void storeLoadedAssets()
	{
		/* Retrieve the loaded assets from the AssetManager using AssetManager.get("fileName"):class. */
		
		//Retrieves the assets for the main menu.
		mainMenuAtlas = manager.get("ui/main menu/atlas/main/main_menu_atlas" + scaleExtension + ".txt");
		
		//Retrieves the assets for the game.
		playerAtlas = manager.get("game/player/atlas/player_atlas" + scaleExtension + ".txt");
		treeAtlas = manager.get("game/tree/atlas/tree_atlas" + scaleExtension + ".txt");
		hudAtlas = manager.get("ui/hud/atlas/hud_atlas" + scaleExtension + ".txt");
		
		//Retrieves the music files.
		//mainMenuMusic = manager.get("sound/music/Ashton Manor.mp3");
		
		//Retrieves sound files
		buttonClick = manager.get("sound/sfx/ui/ButtonClick.ogg", Sound.class);
		swoosh = manager.get("sound/sfx/ui/Swoosh.ogg", Sound.class);
		
		/* Loads any assets that couldn't be loaded using the AssetManager. */
		loadExtraAssets();	
	}
	
	/** Loads any extra assets that couldn't be loaded using the AssetManager. */
	private void loadExtraAssets()
	{
		//Loads the assets used by the main menu which couldn't be loaded by an AssetManager.
		loadMainMenuAssets();
		
		//Loads the assets used in-game.
		loadGameAssets();
		
	}
	
	/** Loads the assets used by the main menu which can't be loaded by the Asset Manager in the updateLoading() method, such as TTF fonts or button styles */
	private void loadMainMenuAssets()
	{
		//Creates the Moon Flower Bold 54pt font. This must be done after the loading is finished because AssetManagers can't load FreeTypeFontGenerators.
		moonFlowerBoldGenerator = new FreeTypeFontGenerator(Gdx.files.internal("ui/fonts/moon flower bold/Moon Flower Bold.ttf"));
		moonFlowerBold_54 = moonFlowerBoldGenerator.generateFont((int)(54 * fontScale));
		moonFlowerBold_54.setScale(moonFlowerBold_54.getScaleX() / fontScale);
		moonFlowerBold_54.getRegion().getTexture().setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		//Creates the Moon Flower Bold 38pt font. This must be done after the loading is finished because AssetManagers can't load FreeTypeFontGenerators.
		moonFlowerBold_38 = moonFlowerBoldGenerator.generateFont((int)(38 * fontScale));	
		moonFlowerBold_38.setScale(moonFlowerBold_38.getScaleX() / fontScale);	
		moonFlowerBold_38.getRegion().getTexture().setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		//Creates the skin and the styles used for the main menu GUI.
		mainMenuSkin = new Skin(mainMenuAtlas);
		
		//Creates the TextButtonStyle which dictates the look of the main menu buttons
		mainMenuButtonStyle = new TextButtonStyle();
		mainMenuButtonStyle.up = mainMenuSkin.getDrawable("ClickButton_Up");	//Sets the sprite for the 'up' state of the main menu buttons
		mainMenuButtonStyle.down = mainMenuSkin.getDrawable("ClickButton_Down");	//Sets the sprite for the 'down' state of the main menu buttons
		mainMenuButtonStyle.font = moonFlowerBold_54;
		
		//Creates the LabelStyle used to determine the appearance of headers in the main menu. A gray color is chosen as a second argument.
		mainMenuHeaderStyle = new LabelStyle(moonFlowerBold_54, new Color(0.2941f, 0.3216f, 0.2316f, 1f));
		
		//Creates the list style used by the main menu's world selection list.
		mainMenuListStyle = new ListStyle();
		mainMenuListStyle.font = moonFlowerBold_38;
		mainMenuListStyle.selection = mainMenuSkin.getDrawable("ListSelection");//new NinePatchDrawable(ninePatch);
		mainMenuListStyle.fontColorUnselected = new Color(0.803f, 0.803f, 0.803f, 1);	//If unselected, the text for the item in the world selection list will be light gray.
		mainMenuListStyle.fontColorSelected = Color.WHITE;
	}
	
	/** Loads the assets used in-game which couldn't be loaded by the Asset Manager in the updateLoading() method, such as SkeletonJson files. */
	private void loadGameAssets()
	{		
		//Loads the assets needed for the HUD
		hudSkin = new Skin(hudAtlas);
		
		//Creates the style for the circle button
		circleButtonStyle = new ButtonStyle();		
		
		//Fetches the CircleButton sprite from the atlas and makes a dark gray version of it.
		Sprite circleButtonDown = hudSkin.getSprite("CircleButton");
		circleButtonDown.setColor(Color.BLACK);
		SpriteDrawable circleButtonDownDrawable = new SpriteDrawable(circleButtonDown);
		
		//Register the normal circle button as the 'up' image, and the dark gray one as the 'down' image.
		circleButtonStyle.up = hudSkin.getDrawable("CircleButton");
		circleButtonStyle.down = circleButtonDownDrawable;
		
		//Fetches the arrow sprite from the hud atlas to place on the left arrow button.
		Sprite leftArrow = hudSkin.getSprite("Arrow");
		//Scale the arrow down so that, no matter the atlas size used, the arrow takes the same world space.
		leftArrow.setSize(leftArrow.getWidth()/scaleFactor, leftArrow.getHeight()/scaleFactor);
		SpriteDrawable leftArrowDrawable = new SpriteDrawable(leftArrow);
		
		//Create a style for the left arrow button
		leftArrowButtonStyle = new ImageButtonStyle(circleButtonStyle);
		//Scale the arrow down so that, no matter the atlas size used, the arrow takes the same world space.
		leftArrow.setSize(leftArrow.getWidth()/scaleFactor, leftArrow.getHeight()/scaleFactor);
		leftArrowButtonStyle.imageUp = leftArrowDrawable;
		leftArrowButtonStyle.imageDown = leftArrowDrawable;
		
		//Fetches the arrow sprite from the hud atlas and flips it to point to the right
		Sprite rightArrow = hudSkin.getSprite("Arrow");
		rightArrow.setScale(rightArrow.getScaleX() * -1, rightArrow.getScaleY());	//Flips the direction of the arrow.
		//Scale the arrow down so that, no matter the atlas size used, the arrow takes the same world space.
		rightArrow.setSize(rightArrow.getWidth()/scaleFactor, rightArrow.getHeight()/scaleFactor);
		rightArrow.setOrigin(rightArrow.getWidth()/2, 0);	//Centers the arrow's pivot point so that it gets placed at the center of the button. 
		SpriteDrawable rightArrowDrawable = new SpriteDrawable(rightArrow);	//Creates a drawable to place on the right arrow's ImageButtonStyle.
		
		//Creates the style for the right arrow button
		rightArrowButtonStyle = new ImageButtonStyle(circleButtonStyle);
		rightArrowButtonStyle.imageUp = rightArrowDrawable;
		rightArrowButtonStyle.imageDown = rightArrowDrawable;
		
		//Creates the style for the backpack button.
		backpackButtonStyle = new ButtonStyle();
		backpackButtonStyle.up = hudSkin.getDrawable("Backpack");
		backpackButtonStyle.down = backpackButtonStyle.up;
		
		
		
		//Sets up the Spine data used to display and animate the player.
		playerSkeletonJson = new SkeletonJson(playerAtlas);
		playerSkeletonJson.setScale(PLAYER_SKELETON_SCALE);	//Re-scale the skeleton to fit world-units. Atlas data is read the same no matter the scale of the SkeletonJson.
		playerSkeletonData = playerSkeletonJson.readSkeletonData(Gdx.files.internal("game/player/skeleton/player_skeleton.json"));
		//Gets the animations from the Player's SkeletonData instance.
		playerIdle = playerSkeletonData.findAnimation("Idle");
		playerWalk = playerSkeletonData.findAnimation("Walk");
		playerJump = playerSkeletonData.findAnimation("Jump");
		playerFall = playerSkeletonData.findAnimation("Fall");
		playerChopTree = playerSkeletonData.findAnimation("ChopTree");
		playerChopTree_Start = playerSkeletonData.findAnimation("ChopTree_Start");
		
		//Sets up the Spine data used to display and animate the trees.
		treeSkeletonJson = new SkeletonJson(treeAtlas);
		treeSkeletonJson.setScale(TREE_SKELETON_SCALE);
		treeSkeletonData = treeSkeletonJson.readSkeletonData(Gdx.files.internal("game/tree/skeleton/tree_skeleton.json"));
		//Loads the animations used by the trees
		treeIdle = treeSkeletonData.findAnimation("Idle");
		treeClicked = treeSkeletonData.findAnimation("Clicked");
		treeHit = treeSkeletonData.findAnimation("Hit");
		treeScavenged = treeSkeletonData.findAnimation("Scavenged");
		
		//Creates a new skeleton renderer to draw Spine skeletons using a SpriteBatch instance.
		skeletonRenderer = new SkeletonRenderer();
	}
	
	/** Returns the loading progress for the assets. Note that this method will return zero if the updateLoading() method has not been called yet. 
	 * 
	 * @return A value between 0.0f and 1.0f indicating the progress of the loading.
	 */
	public float getProgress()
	{
		//Returns a value between 0.0f and 1.0f indicating the progress of the AssetManager. This AssetManager instance is the one which loads the assets.
		return manager.getProgress();
	}
	
	/** Disposes of any assets used by the loading screen or the company splash screen to free up system resources. */
	public void disposeInitialAssets()
	{
		//Disposes of the assets used by the loading screen and the company splash screen.
		loadingScreenAtlas.dispose();
		
		companyLogo = null;
		loadingText = null;
		preloaderSprites = null;
	}
	
	/** Called on application quit inside the Survivor class. Frees any audio/visual resources used by the application. */
	public void dispose()
	{
		System.out.println("Assets Disposed");
		
		//Dispose of texture atlases, font generators, and other assets which weren't loaded by the AssetManager.
		moonFlowerBoldGenerator.dispose();
		moonFlowerBold_54.dispose();
		moonFlowerBold_38.dispose();
		
		mainMenuSkin.dispose();
		
		//Dispose of all assets loaded by the AssetManager.
		manager.clear();
	}
}
