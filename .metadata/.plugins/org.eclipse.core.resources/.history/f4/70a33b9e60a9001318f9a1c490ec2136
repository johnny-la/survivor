package com.jonathan.survivor.hud;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.jonathan.survivor.World;
import com.jonathan.survivor.inventory.Inventory;
import com.jonathan.survivor.managers.ItemManager;

public class CraftingHud extends Hud
{
	/** Holds the height of the inventory list holding all of the item buttons. */
	public static final float INVENTORY_LIST_HEIGHT = 180;
	
	/** Holds the offset used to anchor the inventory list to the left of the backpack background. Offsets the list relative to the center of the screen. */
	public static final float INVENTORY_LIST_X_OFFSET = -75;
	public static final float INVENTORY_LIST_Y_OFFSET = -35;
	
	/** Holds the offset used to anchor the inventory list to the left of the backpack background. Offsets the table relative to the center of the screen. */
	public static final float CRAFTING_TABLE_X_OFFSET = 75;
	public static final float CRAFTING_TABLE_Y_OFFSET = -35;
	
	/** Stores the offset used to anchor the craftButton to the bottom-right of the backpack background. Offsets the button relative to the bottom-right of the background*/
	public static final float CRAFT_BUTTON_X_OFFSET = 55;
	public static final float CRAFT_BUTTON_Y_OFFSET = 35;
	
	/** Stores the offset used to anchor the back button to the bottom-right of the backpack background with a certain padding. */
	public static final float BACK_BUTTON_X_OFFSET = 10;
	public static final float BACK_BUTTON_Y_OFFSET = 5;
	
	/** Stores the player's inventory in order to populate the items in the inventory list. */
	private Inventory inventory;
	
	/** Holds the ItemManager instance. Its purpose is to give access to Item instances, which give an item's information and sprite. */
	ItemManager itemManager;	
	
	/** Stores the image of the backpack background. */
	private Image backpackBg;
	
	/** Stores the header displaying "Crafting" on top of the Hud. */
	private Label craftingHeader;
	
	/** Stores the list containing all the items in the player's inventory. */
	private InventoryList inventoryList;
	
	/** Holds the crafting table which holds a grid of the items being crafted. */
	private CraftingTable craftingTable;
	
	/** Stores the button displaying "Craft". When pressed, the items in the crafting table combine to create a new item. */
	private TextButton craftButton;
	
	/** Stores the back button, used to exit out of the crafting menu. */
	private Button backButton;

	/** Accepts the Stage instance where widgets are drawn, and the world, used to manipulate the world according to button presses. The ItemManager
	 *  is accepted in order to fetch internally-pooled Item instances in order to draw the items in the player's inventory. */
	public CraftingHud(Stage stage, World world, Inventory inventory, ItemManager itemManager) 
	{
		super(stage, world);
		
		//Populates the inventory member variable with the given argument.
		this.inventory = inventory;
		//Stores the itemManager instance used to access Item instances in order to draw the items in the inventory.
		this.itemManager = itemManager;
		
		//Creates the backpack's background using the TextureRegion stored inside the Assets singleton.
		backpackBg = new Image(assets.backpackBgRegion);
		//Resizes the background according to the scaleFactor of the assets. Makes it so that the image takes the same screen space no matter screen size.
		backpackBg.setSize(backpackBg.getWidth() / assets.scaleFactor, backpackBg.getHeight() / assets.scaleFactor);
		
		//Creates a new header for the crafting HUD using the pre-defined header's label style.
		craftingHeader = new Label("Crafting", assets.hudHeaderStyle);
		
		//Creates the inventory list displaying a list of every item in the player's inventory. Accepts the itemManager to access item sprites, and accepts with the list's height.
		inventoryList = new InventoryList(itemManager, inventory, INVENTORY_LIST_HEIGHT);
		
		//Instantiates the crafting table which holds a grid of the items being crafted. Accepts the itemManager to access item sprites.
		craftingTable = new CraftingTable(itemManager, inventory);
		
		//Creates the "Craft" button, which, which pressed, combines together the items in the crafting table.
		craftButton = new TextButton("Craft", assets.mainMenuButtonStyle);
		//Sets the color of the craft button.
		craftButton.setColor(new Color(1f, 0.6f, 0.12f, 1));
		
		//Resizes the craftButton so that, no matter the atlas size chosen, the button occupies the same space in gui coordinates.
		craftButton.setSize(craftButton.getWidth() / assets.scaleFactor, craftButton.getHeight() / assets.scaleFactor);
		
		//Creates the back button using the designated ButtonStyle, which dictates its appearance.
		backButton = new Button(assets.backButtonStyle);
		//Resizes the back button so that, no matter the size of the atlas chosen, the button will occupy the same space in gui coordinates.
		backButton.setSize(backButton.getWidth() / assets.scaleFactor, backButton.getHeight() / assets.scaleFactor);
		
		//Creates a ButtonListener instance which will receive all of the button's touch events.
		ButtonListener buttonListener = new ButtonListener();
		
		//Registers the buttons to the button listener so that it receives all button touch events.
		craftButton.addListener(buttonListener);
		backButton.addListener(buttonListener);
	}
	
	/** Registers any events called by the buttons of the Crafting Hud. */
	class ButtonListener extends ClickListener
	{		
		/** Delegated when the user releases a button click. */
		@Override
		public void clicked(InputEvent event, float x, float y)
		{
			//If the button displaying "Craft" on the bottom-right of the screen was pressed
			if(event.getTarget() == craftButton)
			{
				
			}
			//If the back button was pressed
			if(event.getTarget() == backButton)
			{
				//Inform the GameScreen that the back button has been pressed by delegating the onBack() method to the listener. Returns to the game.
				hudListener.onBack();
			}
		}
	}

	/** Called whenever the current Hud of the game switches to the backpack Hud. Used to reset the stage to hold the widgets of the Backpack Hud. Also called
	 *  when the screen is resized. Thus, any widgets can be repositioned or rescaled accordingly.
	 *  
	 *  @param guiWidth The width in pixels that the gui should occupy.
	 *  @param guiHeight the height in pixels that the gui should occupy.
	 */
	@Override
	public void reset(float guiWidth, float guiHeight) 
	{
		//Clears the stage to make room for the crafting hud's widgets.
		stage.clear();				
		
		//Centers the backpack background to the stage. Note that the position is the bottom-left of backpackBg's image.
		backpackBg.setPosition(stage.getWidth()/2 - backpackBg.getWidth()/2, stage.getHeight()/2 - backpackBg.getHeight()/2);
		
		//Retrieves the table which holds the widgets of the the inventory list and the crafting table. 
		Table inventoryTable = inventoryList.getButtonTable();
		Table craftTable = craftingTable.getTable();
		
		//Sets the position of the inventory table by positioning it relative to the center of the screen. Note that position (0,0) places the table at the center of the screen.
		inventoryTable.setPosition(INVENTORY_LIST_X_OFFSET, INVENTORY_LIST_Y_OFFSET);
		//Sets the position of the crafting table by anchoring it to the bottom left of the backpack background, with a given offset.
		craftTable.setPosition(backpackBg.getX() + CRAFTING_TABLE_X_OFFSET, backpackBg.getY() + CRAFTING_TABLE_Y_OFFSET);
		
		System.out.println("BackpackBG position " + inventoryTable.getX() + ", " + inventoryTable.getY());
		
		//Positions the craftButton relative to the bottom-right of the backpack background using the offset constants.
		craftButton.setPosition(backpackBg.getX() + backpackBg.getWidth() - craftButton.getWidth() - CRAFT_BUTTON_X_OFFSET, backpackBg.getY() + CRAFT_BUTTON_Y_OFFSET);
		//Anchors the back button to the bottom-right of the backpack background, using the given offsets. Note that button positions are the bottom-left of the buttons.
		backButton.setPosition(backpackBg.getX() + backpackBg.getWidth() - backButton.getWidth() - BACK_BUTTON_X_OFFSET, backpackBg.getY() + BACK_BUTTON_Y_OFFSET);
		
		//Adds the backpack background to the center of the stage.
		stage.addActor(backpackBg);
		//Adds the craft button to the stage.
		stage.addActor(craftButton);
		//Adds the back button to the stage.
		stage.addActor(backButton);
		
		//Adds the inventoryList's button table to the stage, effectively adding the item list to the HUD.
		stage.addActor(inventoryList.getButtonTable());
		//Adds the crafting table to the stage. 
		stage.addActor(craftTable);
	}

}
