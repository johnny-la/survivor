package com.jonathan.survivor.renderers;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.esotericsoftware.spine.Event;
import com.esotericsoftware.spine.Skeleton;
import com.jonathan.survivor.Assets;
import com.jonathan.survivor.entity.InteractiveObject;
import com.jonathan.survivor.entity.Tree;
import com.jonathan.survivor.entity.InteractiveObject.InteractiveState;

public class InteractiveObjectRenderer 
{
	/** Stores the SpriteBatcher used to draw the GameObjects. */
	private SpriteBatch batcher;	
	
	/** Stores the Assets singleton which stores all of the visual assets needed to draw the interactive GameObjects. */
	private Assets assets = Assets.instance;
	
	/** Stores the color of transparent GameObjects. */
	private static final Color TRANSPARENT_COLOR = new Color(0, 0, 0, 0.4f);
	/** Helper Color instance used to color GameObjects and avoid creating new color instances. */
	private Color workingColor;
	
	//Helper Array that's passed to the Animation.set() method.
	private Array<Event> events = new Array<Event>();
	
	/** Accepts the SpriteBatch instance used to draw the Interactive GameObjects. */
	public InteractiveObjectRenderer(SpriteBatch batcher)
	{
		//Stores the SpriteBatch instance used to draw the Interactive GameObjects.
		this.batcher = batcher;
		
		//Helper Color instance used to avoid instantiation. Defaults to white.
		workingColor = new Color(Color.WHITE);
	}
	
	/** Draws the given InteractiveObject. Accepts whether or not the GameObject should be drawn transparent. */
	public void draw(InteractiveObject gameObject, boolean transparent)
	{
		//If the GameObject is a Tree
		if(gameObject instanceof Tree)
			//Delegate the drawing to the drawTree() method.
			drawTree((Tree)gameObject, transparent);
	}
	
	/** Renders a Tree GameObject, which contains a Spine Skeleton instance which can be drawn to the screen. Accepts whether or not it should be drawn transparent. */
	private void drawTree(Tree tree, boolean drawTransparent)
	{
		//Stores the Spine skeleton of the tree which controls its appearance.
		Skeleton skeleton = tree.getSkeleton();
		
		//Sets the bottom-center position of the skeleton to the tree's bottom-center position. Note that Skeleton/GameObject.position hold the bottom-center of the tree.
		skeleton.setX(tree.getX());
		skeleton.setY(tree.getY());
		
		workingColor.set(Color.WHITE);
		
		//If the tree has jump spawned
		if(tree.getInteractiveState() == InteractiveState.SPAWN)
		{
			//Reset the tree's skeleton to its setup pose to undo any changes previously done to the skeleton's bones.
			skeleton.setToSetupPose();
			
			//Sets the state time of the tree to a random time so that the idle animation starts playing at a random place for every tree.
			tree.setStateTime((float)Math.random() * 10);
			//Sets the tree's state to IDLE, indicating that the renderer has received the message that the tree has spawned.
			tree.setInteractiveState(InteractiveState.IDLE);
		}
		//Else, if the tree is in IDLE state
		else if(tree.getInteractiveState() == InteractiveState.IDLE)
		{
			//Apply the 'treeIdle' animation to the tree's skeleton. Second and third arguments specify how much time the tree has been idle, third indicates we want to 
			//loop the animation, and last is an array where any possible animation events are delegated.
			assets.treeIdle.apply(skeleton, tree.getStateTime(), tree.getStateTime(), true, events);
		}
		//Else, if the tree was clicked
		else if(tree.getInteractiveState() == InteractiveState.CLICKED)
		{
			skeleton.getColor().mul(Color.GRAY);
			//Apply the 'treeIdle' animation to the tree's skeleton. Second and third arguments specify how much time the tree has been idle, third indicates we want to 
			//loop the animation, and last is an array where any possible animation events are delegated.
			assets.treeIdle.apply(skeleton, tree.getStateTime(), tree.getStateTime(), true, events);
		}
		//Else, if the tree was hit
		else if(tree.getInteractiveState() == InteractiveState.HIT)
		{
			
		}
		
		
		if(drawTransparent)
			skeleton.getColor().set(TRANSPARENT_COLOR);
		else
			skeleton.getColor().set(Color.WHITE);
		
		//Updates the Skeleton in the world.
		skeleton.updateWorldTransform();
		
		//Draws the tree's skeleton using the universal SkeletonRenderer instance, along with the GameScreen's SpriteBatch.
		assets.skeletonRenderer.draw(batcher, skeleton);
	}
}
