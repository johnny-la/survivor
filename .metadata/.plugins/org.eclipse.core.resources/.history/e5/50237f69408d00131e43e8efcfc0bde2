package com.jonathan.survivor;

import java.util.HashMap;
import java.util.Set;

import com.badlogic.gdx.utils.Array;
import com.jonathan.survivor.entity.Clickable;
import com.jonathan.survivor.entity.GameObject;
import com.jonathan.survivor.entity.Human;
import com.jonathan.survivor.entity.Human.Direction;
import com.jonathan.survivor.entity.Human.State;
import com.jonathan.survivor.entity.InteractiveObject;
import com.jonathan.survivor.entity.ItemObject;
import com.jonathan.survivor.entity.ItemObject.ItemState;
import com.jonathan.survivor.entity.Player;
import com.jonathan.survivor.entity.PlayerListener;
import com.jonathan.survivor.entity.Tree;
import com.jonathan.survivor.managers.GameObjectManager;
import com.jonathan.survivor.math.Vector2;

public class World
{
	/** Stores the acceleration due to gravity in the world in m/s^2 */
	public static final Vector2 GRAVITY = new Vector2(0, -15f);
	
	/** Stores the seed used to generate the geometry of the level and randomly place its GameObjects. */
	private int worldSeed;

	/** Stores the profile used to create the world from a save file. */
	private Profile profile;
	
	/** A state the GameScreen needs to know about to change the UI */
	public enum WorldState {
		EXPLORING, FIGHTING, GAME_OVER
	};
	
	/** Stores the state of the world, which simply dictates the GUI the GameScreen should display. */
	private WorldState worldState;

	/** Holds the GameObject Manager instance used to manage the GameObjects in the world. */
	private GameObjectManager goManager;
	
	/** Stores the currently-active level of the world that is being displayed. Determines the walkable area of the world. */
	private Level level;
	/** Stores an instance of a terrain level, used when the player is outside in the procedurally-generated terrain. */
	private TerrainLevel terrainLevel;
	
	/** Holds the Player GameObject that the user is guiding around the world. */
	private Player player;
	
	/** Listens to events delegated by the player. */
	private EventListener eventListener;
	
	/** Helper Vector2 used to store the world coordinates of the last known touch. */
	private Vector2 touchPoint;

	public World(int worldSeed, Profile profile)
	{
		//Stores the seed used to randomly generate the world.
		this.worldSeed = worldSeed;
		//Stores the profile used to generate the world from its save data.
		this.profile = profile;
		
		//Sets the world to its exploration state, since the user always starts off in exploration state. This ensures the correct UI is drawn.
		worldState = WorldState.EXPLORING;
		
		//Creates a GameObjectManager which stores and creates and manages all the instances of GameObjects.
		goManager = new GameObjectManager(profile);
		
		//Creates a new TerrainLevel using the profile, which specifies the world seed of the level. Also permits the level to be created where
		//the user left off. This level is a container of TerrainLayers that the user can traverse.
		terrainLevel = new TerrainLevel(profile, goManager);
		//Sets the terrain level as the currently active level to be displayed by the world.
		setLevel(terrainLevel);
		
		//Stores the player created inside the GameObjectManager inside a member variable.
		player = goManager.getPlayer();		
		//Sets up the player's initial values when being dropped into the world.
		setupPlayer();
		
		//Creates a new listener which will have its methods delegated by GameObjects.
		eventListener = new EventListener();
		
		//Sets the eventListener to listen for the player's events.
		player.setListener(eventListener);
		
		//Creates a Vector2 instance to hold the coordinates of the latest touch.
		touchPoint = new Vector2();
	}
	
	/** Called every frame to update the world and its GameObjects. */
	public void update(float deltaTime)
	{
		//Updates the player, his movement, and his game logic.
		updatePlayer(deltaTime);
		//Updates the GameObjects contained by the world's level, such as trees.
		updateLevelObjects(deltaTime);
	}
	
	/**Updates the player, his movement, and his game logic. */
	private void updatePlayer(float deltaTime)
	{
		//Check if the player has collided with anything of importance.
		checkPlayerCollisions();
		
		if(player.getState() == State.IDLE)
		{
			
		}
		//If the player is jumping
		if(player.getState() == State.JUMP || player.getState() == State.FALL)
		{
			//Set the player's acceleration to the acceleration gravity.
			player.setAcceleration(GRAVITY.x, GRAVITY.y);
			
			//FAILSAFE. Checks if the player switched layers by either moving to the right or left of his current layer. If so, we move the player over by a cell. 
			checkForLayerSwitch(player);
			
			//If the player has collided with the ground
			if(checkGroundCollision(player))
			{
				//Set the player to IDLE state.
				player.setState(State.IDLE);
				//Take off any acceleration from the player.
				player.setAcceleration(0, 0);
				//Set The player's velocity to zero.
				player.setVelocity(0,0);
				//Set the player's bottom y-position to the height of the ground.
				player.setY(terrainLevel.getGroundHeight(player.getX()));
			}
		}
		//Else, if the player is walking
		else if(player.getState() == State.WALK)
		{
			//If the player is walking to the right
			if(player.getDirection() == Direction.RIGHT)
			{
				//Apply a positive x-velocity to the player using the predefined walking speed constant.
				player.setVelocity(Player.MAX_WALK_SPEED, 0);
			}
			//Else, if the player is walking to the left
			else
			{
				//Apply a negative x-velocity to the player using the predefined walking speed constant.
				player.setVelocity(-Player.MAX_WALK_SPEED, 0);
			}
			
			//Checks if the player switched layers by either moving to the right or left of his current layer. If so, we move the player over by a cell.
			checkForLayerSwitch(player);
			
			//Makes the player follow the level's ground.
			lockToGround(player);
		}
		
		//Updates the position of the player based on his velocity and updates his collider's position.
		player.update(deltaTime);
	}
	
	/** Updates the GameObjects contained by the currently active level of the world. */
	private void updateLevelObjects(float deltaTime)
	{
		//Retrieves all of the GameObjects stored inside the world's level
		Array<GameObject> gameObjects = level.getGameObjects();
		
		//Cycle through all of the GameObjects contained in the level
		for(int i = 0; i < gameObjects.size; i++)
		{
			//Store the GameObject
			GameObject go = gameObjects.get(i);
			
			//If the GameObject in the level is an ItemObject that is waiting to be picked up
			if(go instanceof ItemObject)
			{
				//Update the ItemObject.
				updateItemObject((ItemObject) go, deltaTime);
			}
			//Else, for any other generic GameObject, simply update the GameObject.
			else
			{	
				//Update the GameObject.
				go.update(deltaTime);
			}
		}
	}
	
	/** Updates the Item Object's game logic. Note that an ItemObject is an item on the ground that can be looted. */
	private void updateItemObject(ItemObject itemObject, float deltaTime)
	{
		//If the ItemObject has spawned and is flying through the air
		if(itemObject.getItemState() == ItemState.FLY)
		{
			//Apply gravity to the Item GameObject so that it falls to the ground.
			itemObject.setAcceleration(GRAVITY.x, GRAVITY.y);
			
			//Check for a ground collision, and abruptly stop the GameObject if it has landed.
			if(checkGroundCollision(itemObject))
			{	
				//Set the Item GameObject's velocity and acceleration to zero to stop it from falling.
				itemObject.setVelocity(0, 0);
				itemObject.setAcceleration(0, 0);
				
				//Tell the ItemObject that it is on the ground.
				itemObject.setItemState(ItemState.GROUNDED);
			}
		}
		
		//Update the ItemObject, along with its collider and its position.
		itemObject.update(deltaTime);
	}
	
	/** Listens for events delegated by the GameObjects of the world. */
	class EventListener implements PlayerListener 
	{
		/** Delegates when the Player scavenges an Interactive GameObject. Scavenging means to destroy a target, such as destroying a tree. */
		@Override
		public void scavengedObject(InteractiveObject object)
		{
			//Adds the scavenged GameObject to the profile. Like this, if, say, a tree was just scavenged, it will never re-appear in the same TerrainLayer.
			profile.addScavengedLayerObject(object);
			
			//Spawn items at the location that the object was destroyed.
			spawnItems(object);
		}
	}
	
	/** This method is called once to make the player move to the right. */
	public void movePlayerRight()
	{
		//If the player is jumping or falling, don't let him move left, or serious glitches will occur.
		if(player.getState() == State.JUMP || player.getState() == State.FALL)
			return;
		
		//Sets the player to the walking state so that the world can apply a velocity to it.
		player.setState(State.WALK);
		//Makes the player walk in the right direction. This world's update() method knows how to interpret this direction.
		player.setDirection(Direction.RIGHT);
		
		//Make the player lose his target once he has started to walk using the arrow buttons.
		player.loseTarget();
	}
	
	/** This method is called once to make the player move to the left. */
	public void movePlayerLeft()
	{
		//If the player is jumping or falling, don't let him move left, or serious glitches will occur.
		if(player.getState() == State.JUMP || player.getState() == State.FALL)
			return;
		
		//Sets the player to the walking state so that the world can apply a velocity to it.
		player.setState(State.WALK);
		//Makes the player walk in the left direction.
		player.setDirection(Direction.LEFT);
		
		//Make the player lose his target once he has started to walk using the arrow buttons.
		player.loseTarget();
	}
	
	/** Stops the given Human GameObject from moving. */
	public void stopMoving(Human human) 
	{
		//Stops the human from walking in the x-direction.
		human.setVelocityX(0);
		
		//Only set the human to idle state if he is not jumping or falling. Otherwise, he will be set to IDLE whilst jumping/falling, causing glitches.
		//Regardless, the human will be set to IDLE once he lands his jump/fall. 
		if(human.getState() != State.JUMP && human.getState() != State.FALL)
			//Tells the human instance that it is in idle state so that it stops moving. 
			human.setState(State.IDLE);
	}
	
	/** Makes the player walk to the specified GameObject. */
	public void setTarget(Human human, GameObject target)
	{
		//If the Human is jumping or falling, don't let him walk to the target. If the GameObject can't be targetted, return this method.
		if(human.getState() == State.JUMP || human.getState() == State.FALL || !target.canTarget())
			return;
		
		//If the target is a tree, and the player wants to target the tree
		if(target instanceof Tree && human instanceof Player)
		{
			//If the player does not have a melee weapon, return the method to prevent the user from targetting or chopping the tree.
			if(!((Player)human).hasMeleeWeapon())
				return;
		}
		
		//Set the human's target to the given GameObject
		human.setTarget(target);
		
		//Set the human to WALK state
		human.setState(State.WALK);
		
		//If the target is to the right of the human
		if(target.getX() > human.getX())
		{
			//Make the human walk right.
			human.setDirection(Direction.RIGHT);
		}
		//Else, if the target is to the left of the human
		else
		{
			//Make the human walk left.
			human.setDirection(Direction.LEFT);
		}
		
		//If the clicked GameObject is an Interactive GameObject.
		if(target instanceof InteractiveObject)
		{
			//Tell the GameObject it has been clicked and is being targetted.
			((InteractiveObject)target).targetted();
		}
	}
	
	/** Called when a GameObject in the level was touched. */
	private void gameObjectClicked(GameObject gameObject)
	{
		//If the GameObject is clickable
		if(gameObject instanceof Clickable)
		{
			//Make the player walk to the Clickable target
			setTarget(player, gameObject);
		}
		//Else, if an ItemObject on the ground was clicked
		else if(gameObject instanceof ItemObject)
		{
			//Collect the clicked ItemObject and add it to the player's inventory.
			collectItemObject((ItemObject) gameObject);
		}
	}
	
	/** Checks if the player is colliding with any GameObjects. */
	private void checkPlayerCollisions()
	{
		//Checks if the player has collided with his target.
		checkTargetCollisions();
		
	}
	
	/** Checks if the player has collided with his target. */
	private void checkTargetCollisions()
	{
		//Stores the target where the player wants to walk to, if it exists
		GameObject target = player.getTarget();
		//If the player has a target, and the player has touched his target
		if(target != null && !player.isTargetReached() && player.getCollider().intersects(target.getCollider()))
		{
			//Tell the player he has reached his target.
			player.setTargetReached(true);
			
			//Stops the player from moving.
			stopMoving(player);
			
			//If the player's target was a tree.
			if(target instanceof Tree)
			{
				//Start chopping the tree. The player knows his target is the tree to chop.
				player.chopTree();
			}
		}
	}
	
	/** Locks the GameObject to the ground when it is moving. Makes it so that the GameObject follows the path of the ground. */
	public void lockToGround(GameObject gameObject)
	{
		//If the currently-active level is a TerrainLevel
		if(level instanceof TerrainLevel)
		{
			//Find the TerrainLayer where the GameObject resides using a layer lookup based on the GameObject's terrain cell.
			TerrainLayer terrainLayer = terrainLevel.getTerrainLayer(gameObject.getTerrainCell());
			//Sets the GameObject's bottom y-position to the y-position of the ground at the given x-position. This effectively sticks the object to the ground.
			gameObject.setY(terrainLayer.getGroundHeight(gameObject.getX()));
		}
	}
	
	public void checkForLayerSwitch(GameObject gameObject)
	{
		//If the currently-active level is a TerrainLevel
		if(level instanceof TerrainLevel)
		{
			//Find the TerrainLayer where the GameObject resides using a layer lookup based on the GameObject's terrain cell.
			TerrainLayer terrainLayer = terrainLevel.getTerrainLayer(gameObject.getTerrainCell());
			
			//If the the player has moved to the right of his current layer
			if(gameObject.getX() > terrainLayer.getRightPoint().x)
			{
				//Move the GameObject's cell to the right so that the GameObject knows that he has changed cells.
				gameObject.getTerrainCell().moveRight();
				
				//Shift the layers of the level to the right so that the player stays in the center cell.
				terrainLevel.shiftLayersRight();
			}
			//If the the player has moved to the left of his current layer
			else if(gameObject.getX() < terrainLayer.getLeftPoint().x)
			{
				//Move the GameObject's cell to the left so that the GameObject knows that he has changed cells.
				gameObject.getTerrainCell().moveLeft();
				
				//Shift the layers of the level to the left so that the player stays in the center cell.
				terrainLevel.shiftLayersLeft();
			}
		}
	}
	
	/** Returns true if the GameObject is jumping or falling and has fell past the ground. */
	public boolean checkGroundCollision(GameObject gameObject)
	{
		//If the GameObject is in a TerrainLevel (i.e., a layer level)
		if(level instanceof TerrainLevel)
		{
			//If the GameObject is falling and has fallen below ground height
			if(gameObject.getVelocity().y < 0 && gameObject.getY() < terrainLevel.getTerrainLayer(gameObject.getTerrainCell()).getGroundHeight(gameObject.getX()))
			{
				//Return true, as the gameObject has fallen below the ground.
				return true;
			}
		}
		
		//Return false if the GameObject has not been found to be falling below ground height.
		return false;
	}	
	
	/** Spawns items at the GameObject's location. Called when a tree is chopped down or any other GameObject is scavenged/destroyed. */
	public void spawnItems(GameObject gameObject)
	{
		//Stores the HashMap of the InteractiveGameObject, which indicates which items can be dropped once the object is scavenged.
		HashMap<Class, Float> itemProbabilityMap = ((InteractiveObject)gameObject).getItemProbabilityMap();
		
		//Creates a set out of each key of the probability map. Each key is an Item subclass. Each key is an item that has a probability of being dropped from the 
		//Interactive GameObject.
		Set<Class> keys = itemProbabilityMap.keySet();
		
		//Cycles through each possible item type that can be dropped from the scavenged GameObject.
		for(Class key:keys)
		{			
			//Check if a random number is less than the probability of the item dropping. The probability of the item to drop is stored in the key of the HashMap,
			//where the key is the Item subclass that has a probability of being dropped. Note that the value of the key can be between 0 and 1, where 1 means that
			//the item will be dropped no matter the circumstances.
			if(Math.random() < itemProbabilityMap.get(key))
			{
				//Spawns an ItemObject at the position of the destroyed GameObject. The first argument indicates that an Item of the type 'key' wants to be spawned.
				ItemObject itemObject = goManager.spawnItemObject(key, gameObject.getPosition().x, gameObject.getPosition().y);
				
				//Tells the ItemObject that it is on the same TerrainCell as the GameObject which dropped this item. Allows the object to know which TerrainLayer it 
				//belongs to.
				itemObject.setTerrainCell(gameObject.getTerrainCell().getRow(), gameObject.getTerrainCell().getCol());
				
				//Adds the spawned ItemObject to the list of ItemObjects inside the level. It is added to the correct TerrainLayer if the user is on a TerrainLevel.
				level.addGameObject(itemObject);
			}
		}
	}
	
	/** Makes the user pick up the given Item GameObject, removing the GameObject from the world and adding it to the inventory. */
	public void collectItemObject(ItemObject itemObject)
	{
		//Tells the ItemObject that it has been clicked so that the correct animation plays.
		itemObject.setItemState(ItemState.CLICKED);
		itemObject.setVelocity(0, 10);
		//Frees the Item GameObject back into its respective pool to be reused.
		//goManager.freeGameObject(itemObject, ItemObject.class);
	}
	
	/** Called when a touch was registered on the screen. Coordinates given in world units. O(n**2) OPTIMIZE THIS. */
	public void touchUp(float x, float y)
	{
		//Store the coordinates of the touch point inside a Vector2.
		touchPoint.set(x, y);
		
		//If the currently-active level is a TerrainLevel
		if(level instanceof TerrainLevel)
		{
			//Store the middle layers, where the player resides, and where objects can be touched.
			TerrainLayer[] middleLayers = terrainLevel.getMiddleLayers();
			
			//Cycle through the middle layers of the level
			for(int i = 0; i < middleLayers.length; i++)
			{
				//Store the GameObjects residing in the middle layer
				Array<GameObject> gameObjects = middleLayers[i].getGameObjects();
				
				//Cycle through the GameObjects of the middle layer
				for(int j = 0; j < gameObjects.size; j++)
				{
					//Store the GameObject
					GameObject go = gameObjects.get(j);
					
					//If the touch point is inside the GameObject's collider, report a touched GameObject.
					if(go.getCollider().intersects(touchPoint))
					{
						//The GameObject has been clicked.
						gameObjectClicked(go);
					}
				}
			}
		}
	}
	
	/** Sets up the player's initial variables to ensure that the player is placed at the right location. */
	public void setupPlayer()
	{
		//Sets the player's bottom-center position at the current level's starting point. 
		player.setPosition(level.getPlayerStartX(), level.getPlayerStartY());
		
		//If the currently-active level is a TerrainLevel, we must position him in the right cell coordinates.
		if(level instanceof TerrainLevel)
		{
			//Sets the terrain cell of the player to the center cell of the level. The player will always spawn in the center of a TerrainLevel.
			player.setTerrainCell(terrainLevel.getCenterRow(), terrainLevel.getCenterCol());
		}
	}
	
	/** Returns the currently active level of the world used to dictate the walkable area the world. */
	public Level getLevel()
	{
		return level;
	}
	
	/** Sets the level used to determine the walkable area of the world. Also changes the GameObjects on screen. */
	public void setLevel(Level level)
	{
		this.level = level;
	}
	
	/** Gets the TerrainLevel used by the world. */
	public TerrainLevel getTerrainLevel() 
	{
		//Returns the TerrainLevel of the world.
		return terrainLevel;
	}
	
	/** Sets the TerrainLevel used by the world. */
	public void setTerrainLevel(TerrainLevel terrainLevel) 
	{
		//Updates the TerrainLevel of the world.
		this.terrainLevel = terrainLevel;
	}
	
	/** Returns the state of the world, used to tell the GameScreen how to render its GUI. */
	public WorldState getWorldState() 
	{
		return worldState;
	}

	/** Sets the state of the world. This can modify the way the GameScreen displays its GUI. */
	public void setWorldState(WorldState worldState) 
	{
		this.worldState = worldState;
	}
	
	/** Gets the GameObjectManager used to create and manager GameObjects in the world. */
	public GameObjectManager getGOManager()
	{
		return goManager;
	}
	
	/** Sets the GameObjectManager used to create and manager GameObjects in the world. */
	public void setGOManager(GameObjectManager goManager)
	{
		this.goManager = goManager;
	}
	
	/** Gets the player the user is controlling in the world. */
	public Player getPlayer()
	{
		return player;
	}
	
	/** Sets the Player GameObject being controlled by the user. */
	public void setPlayer(Player player)
	{
		this.player = player;
	}
	
}
