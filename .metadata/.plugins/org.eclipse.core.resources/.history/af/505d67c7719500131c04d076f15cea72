package com.jonathan.survivor.hud;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.List;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.jonathan.survivor.World;

public class SurvivalGuideHud extends Hud
{
	/** Stores the y position of the table nudge the table up, so that the header is at the right position on the backpack. */
	public static final float TABLE_Y_OFFSET = 32;
	
	/** Stores the x-offset of the "Guide" header relative to the center of the screen. */
	public static final float HEADER_X_OFFSET = 100;
	/** Stores the offset between the bottom of the "Guide" header and the top of the listof entries. Adds spacing between the header and the buttons. */
	public static final float HEADER_Y_OFFSET = 10;
	
	/** Holds the amount the list is nudged to the right. This allows the entries in the list to look left-aligned. */
	public static final float LIST_X_OFFSET = 17;
	
	/** Stores the offset used to anchor the back button to the bottom-right of the screen with a certain padding. */
	public static final float BACK_BUTTON_X_OFFSET = 20;
	public static final float BACK_BUTTON_Y_OFFSET = 5;
	
	
	/** Stores the image of the survival guide's background. */
	private Image survivalGuideBg;
	
	/** Stores the header displaying "Guide" on top of the Hud. */
	private Label survivalGuideHeader;
	
	/** Stores the list prompting the user to select an item to view in the survival guide. */
	private List list;
	
	/** Holds the label displaying the description for the entry the user clicked. */
	private Label entryLabel;
	
	/** True if the description for an entry is currently being shown. On back, revert to the entry name list. */
	private boolean displayingEntry;
	
	/** Holds the list of entry names that the user can choose from the list. */
	private final String[] entryNames = new String[]{"How to Escape", "How to Eat", "How to defend yourself"}; 
	/** Holds the description of every entry in the survival guide. */
	private final String[] entries = new String[]{"Do something", 
											"Make Bread. 1 Wheat + 1 Baking Powder", 
											"Build a rifle\n20 iron\nYou need a bullets, after that\n"};
	
	/** Stores the back button, used to exit out of the backpack hud. */
	private Button backButton;
	
	/** Stores the Table instance where buttons are organized in a grid-like fashion. */
	private Table table;
	
	/** Accepts the stage where widgets are placed. The passed world is unused for this HUD. */
	public SurvivalGuideHud(Stage stage, World world)
	{
		super(stage, world);
		
		//Creates the image displaying the backpack background. Uses the pre-defined TextureRegion displaying the background.
		survivalGuideBg = new Image(assets.survivalGuideBgRegion);
		//Re-scales the background so that it takes the same space on the screen no matter the atlas size chosen.
		survivalGuideBg.setSize(survivalGuideBg.getWidth() / assets.scaleFactor, survivalGuideBg.getHeight() / assets.scaleFactor);
		
		//Creates a new header for the backpack using the pre-defined header's label style.
		survivalGuideHeader = new Label("Survival", assets.hudHeaderStyle);
		
		//Creates the list displaying the names of all entries in the survival guide.
		list = new List(entryNames, assets.survivalGuideListStyle);
		//Makes it so that the selection box around the selected item in the list is invisible. No selection box should appear in the entry list.
		list.setColor(Color.CLEAR);
		
		//Instantiates the label that will display the description for an entry in the survival guide.
		entryLabel = new Label("", assets.hudLabelStyle);
		
		//Creates the back button using the designated ButtonStyle, which dictates its appearance.
		backButton = new Button(assets.backButtonStyle);
		//Resizes the back button so that, no matter the size of the atlas chosen, the button will occupy the same space in gui coordinates.
		backButton.setSize(backButton.getWidth() / assets.scaleFactor, backButton.getHeight() / assets.scaleFactor);
		
		//Adds a change listener to the list to detect when an entry name is selected.
		list.addListener(new ChangeListener() {
			@Override
			public void changed(ChangeEvent event, Actor actor) {
				showEntryDescription(list.getSelectedIndex());				
			}

		});
		
		//Add a ClickListener to the back button
		backButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//If the survival guide is currently showing an entry description.
				if(displayingEntry)
				{
					//Revert back to the list of entry names
					showEntryList();
				}
				//Else, if the list of entry names is being shown
				else
				{
					//Tell the game screen to revert back to the backpack hud.
					hudListener.onBack();
				}
			}
		});
		
		//Creates a new Table instance to neatly arrange the buttons on the hud.
		table = new Table();
		
		//Add the header to the top of the table.
		table.add(survivalGuideHeader).padBottom(HEADER_Y_OFFSET).center().padLeft(HEADER_X_OFFSET).row();
		//Adds the list of survival guide entries to the table. Pads it to the left so that it is nudged to the right.
		table.add(list).padLeft(LIST_X_OFFSET);
		
	}
	
	@Override
	public void draw(float deltaTime)
	{
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		//Draws the Survival Guide HUD and its widgets to the screen.
		super.draw(deltaTime);
	}
	
	//Displays the list consisting of entry names.
	private void showEntryList() 
	{
		table.removeActor(entryLabel);
		table.add(list).padLeft(LIST_X_OFFSET);
		
		displayingEntry = false;
		
	}
	
	//Displays the description for the entry with the given index in the entryNames:String[] array.
	private void showEntryDescription(int index) 
	{
		table.removeActor(list);
		
		entryLabel.setText(entries[index]);
		table.add(entryLabel).padLeft(LIST_X_OFFSET);
		
		//Tells the survival guide that it is currently displaying the description for an entry. On back button, the list of entry names will be shown.
		displayingEntry = true;
		
	}

	/** Called either when this pause menu is supposed to be displayed, or when the screen is resized. Parameters indicate the size that the HUD should occupy. */
	@Override
	public void reset(float guiWidth, float guiHeight) 
	{
		//Clear the current contents of the stage to erase the previously-displayed Hud and make way for the pause menu's widgets.
		stage.clear();
		
		//Resizes the table so that it occupies the entire size of the gui to thus occupy the entire stage.
		table.setBounds(0, 0, guiWidth, guiHeight);
		
		//Centers the survival guide background to the stage. Note that the position is the bottom-left of survivalGuideBg's image.
		survivalGuideBg.setPosition(stage.getWidth()/2 - survivalGuideBg.getWidth()/2, stage.getHeight()/2 - survivalGuideBg.getHeight()/2);
		//Anchors the back button to the bottom-right of the survival guide background, using the given offsets. Note that button positions are the bottom-left of the buttons.
		backButton.setPosition(survivalGuideBg.getX() + survivalGuideBg.getWidth() - backButton.getWidth() - BACK_BUTTON_X_OFFSET, survivalGuideBg.getY() + BACK_BUTTON_Y_OFFSET);
		
		//Offsets the table's bottom y-position up to place the header at the right position on the backpack.
		table.setY(TABLE_Y_OFFSET);
		
		//Adds the survival guide background to the center of the stage.
		stage.addActor(survivalGuideBg);
		//Adds the back button to the stage.
		stage.addActor(backButton);
		
		//Adds the table to the stage so that its widgets are drawn to the screen.
		stage.addActor(table);
		
	}
}
