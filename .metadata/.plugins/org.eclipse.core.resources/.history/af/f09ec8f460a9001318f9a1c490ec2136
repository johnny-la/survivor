package com.jonathan.survivor.hud;

import java.util.HashMap;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton;
import com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton.ImageTextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;
import com.badlogic.gdx.utils.Array;
import com.jonathan.survivor.Assets;
import com.jonathan.survivor.inventory.Inventory;
import com.jonathan.survivor.inventory.Wood;
import com.jonathan.survivor.managers.ItemManager;

/*
 * Displays a table with six item slots and one crafted item slot. 
 */

public class CraftingTable 
{
	/** Stores the amount of columns of ItemCells in the table. */
	private static final int NUM_COLUMNS = 3;
	
	/** Holds the number of items that can be placed inside the crafting table. */
	private static final int NUM_ITEMS = 6;
	
	/** Stores the width and height of each item button. Note that this is the size of the ItemCells' backgrounds, not of the item's image itself. */
	private static final float BUTTON_WIDTH = 32;
	private static final float BUTTON_HEIGHT = 32;
	
	/** Holds the horizontal distance between each item button. */
	private static final float BUTTON_PAD_RIGHT = 15;
	
	/** Holds the vertical distance between each item button. */
	private static final float BUTTON_PAD_BOTTOM = 7;
	
	/** Holds the color of the item box which acts as the small box behind each item sprite. */
	private static final Color ITEM_BOX_COLOR = new Color(0.5f, 0.5f, 0.5f, 1);
	
	/** Stores the color of the text displaying the quantity of each item in the crafting table. */
	private static final Color TEXT_COLOR = Color.WHITE;
	
	/** Holds the ItemManager instance from which the Sprites for each item is retrieved. */
	private ItemManager itemManager;
	
	/** Holds the universal Assets singleton used to retrieve the visual assets needed to create the inventory list. */
	private Assets assets = Assets.instance;
	
	/** Stores the table containing all of the items in the crafting table. */
	private Table table;
	
	/** Holds an array containing the six cells which hold an item in the table. */
	private Array<ItemCell> itemCells;
	
	/** Stores the ItemCell displaying the item that is crafted as a result of the items in the crafting table. */
	private ItemCell craftedItemCell;
	
	/** Holds the image displaying the arrow below the grid of items. */
	private Image arrowImage;
	
	/** Maps an Item subclass with a item cell displaying this item. */
	private HashMap<Class, ItemCell> buttonMap;
	
	/** Accepts the itemManager from which to retrieve the items' sprites, the inventory from which to retrieve the player's items,
	 * and the height of the list.
	 */
	public CraftingTable(ItemManager itemManager, Inventory inventory)
	{
		//Stores the parameters in their respective member variables
		this.itemManager = itemManager;
		
		//Creates and populates the crafting table, along with the widgets inside it.
		generateTable();
	}
	
	/** Called upon instantiation when the crafting table's widgets and its table must be created. */
	private void generateTable() 
	{
		//Creates the table which will contain all of the crafting table's widgets.
		table = new Table();
		
		//Instantiates the array of ItemCells which contains the six cells in the crafting table.
		itemCells = new Array<ItemCell>();
		
		//Populates the itemCells array with as many cells as there are items.
		for(int i = 0; i < NUM_ITEMS; i++)
		{
			//Populates each element with an empty item cell.
			itemCells.add(new ItemCell());
			
			//Adds the ItemCell's button into the table.
			table.add(itemCells.get(i).getButton()).padRight(BUTTON_PAD_RIGHT - (itemCells.get(i).getButton().getImage().getWidth() - BUTTOB_WIDTH)).padBottom(BUTTON_PAD_BOTTOM);
			
			//If we have filled up a row
			if((i+1) % NUM_COLUMNS == 0 && i != 0)
			{
				//Skip a row.
				table.row();
			}
		}
		
		//Creates an Image instance for the picture of the arrow. Created using a sprite inside the hud atlas which is stored inside the hudSkin.
		arrowImage = new Image(assets.hudSkin.getDrawable("CraftingArrow"));
		//Resize the arrow image to ensure that, no matter the atlas size chosen, the arrow takes up the same size on the screen.
		arrowImage.setSize(arrowImage.getWidth() / assets.scaleFactor, arrowImage.getHeight() / assets.scaleFactor);
		
		//Creates a new empty itemCell holding the item which is crafted using the items currently in the crafting table.
		craftedItemCell = new ItemCell();
		
		//Add the arrow image to the center of the table, making it span as many columns as there are in the table.
		table.add(arrowImage).colspan(NUM_COLUMNS).center();
		//Skip a row.
		table.row();
		//Add the craftedItemCell's button to the table, make it span as many columns as there are in the table, and center it to the middle of the table.
		table.add(craftedItemCell.getButton()).colspan(NUM_COLUMNS).center();
		
		table.setFillParent(true);
	}
	
	/** Adds the given amount of the item inside a cell in the crafting table. */
	public void addItem(Class itemClass, int quantity)
	{
		//Cycles through each item cell in the crafting table.
		for(int i = 0; i < itemCells.size; i++)
		{
			//Stores the ItemCell the loop is iterating through.
			ItemCell itemCell = itemCells.get(i);
			
			//If the item of the given class is already inside a cell of the crafting table, simply increment the quantity of items in the cell.
			if(itemClass.equals(itemCell.getItemClass()))
			{
				//Add the specified quantity of items to the cell.
				itemCell.add(quantity);
			}
		}
	}

	/** Returns the table containing all the widgets in the crafting table. */
	public Table getTable()
	{
		return table;
	}
	
	/** A cell representing an item as a button in the crafting table. */
	private class ItemCell
	{
		private Class itemClass;	//Stores the Item subclass represented by this cell.
		private ImageTextButtonStyle buttonStyle;	//Holds the style which dictates the look of the button.
		private ImageTextButton button;	//Stores the button which displays the given item and its quantity in the crafting table.
		private int quantity;	//Holds the amount of items of the same type contained in the cell.
		
		/** Creates a default ItemCell with no item inside. */
		public ItemCell()
		{
			//Creates the button style which dictates the look of this item cell/button.
			buttonStyle = new ImageTextButtonStyle();
			buttonStyle.font = assets.moonFlowerBold_38;
			buttonStyle.fontColor = TEXT_COLOR;
			buttonStyle.pressedOffsetX = 1;
			buttonStyle.pressedOffsetY = -1.5f;
			
			//Instantiates a button for the image cell using the button style created above. The button will be empty by default.
			button = new ImageTextButton("", buttonStyle);
			
			//Creates the box which is placed behind the item sprites. Acts as a background to each item image. Uses the "ItemBox" sprite from the HUD atlas.
			Image itemBoxImage = new Image(assets.hudSkin.getDrawable("ItemBox"));
			
			//Sets the properties of the itemBox's image
			itemBoxImage.setColor(ITEM_BOX_COLOR);
			itemBoxImage.setSize(BUTTON_WIDTH, BUTTON_HEIGHT);
			
			//Adds the itemBoxImage before everything else in the button.
			button.addActorAt(0, itemBoxImage);
			
			setItemDrawable(new SpriteDrawable(new Sprite(itemManager.getSprite(Wood.class))));
		}
		
		/** Adds the given amount of items to this cell. Can be negative */
		public void add(int amount)
		{
			//Updates the quantity of the items held in this cell.
			quantity += amount;
			
			//Updates the button's text to display the new quantity of items in the cell.
			button.setText(Integer.toString(quantity));
			
			//If the quantity of items in the cell is one or zero, don't display a number on the button
			if(quantity == 1)
			{
				//Empty the text on the button.
				button.setText("");
			}
			//Else, if the item has just been removed from the crafting table.
			else if(quantity == 0)
			{
				//Empty the cell.
				reset();
			}
		}
		
		/** Updates the button to display the given image. */
		public void setItemDrawable(Drawable drawable)
		{
			//Changes the image being displayed on the button.
			buttonStyle.imageUp = buttonStyle.imageDown = drawable;
			
			button.getImage().setOrigin(-100, -10);
		}
		
		/** Resets the ItemCell to an empty cell. */
		public void reset()
		{
			//Reset the quantity stored in the cell to zero.
			add(-quantity);
			
			//Empty the image stored in the cell's button.
			setItemDrawable(null);
			
			//Remove the itemClass being held by the cell, since the cell is supposed to be emptied.
			setItemClass(null);
		}
		
		/** Sets the item class held by the cell. */
		public void setItemClass(Class itemClass)
		{
			this.itemClass = itemClass;
			
			//Updates the item image on the button. Retrieves a sprite corresponding to the item class, wraps it into a SpriteDrawable, and passes it to setItemDrawable(...).
			setItemDrawable(new SpriteDrawable(itemManager.getSprite(itemClass)));
		}
		
		/** Returns the item class held by the cell. */
		public Class getItemClass()
		{
			return itemClass;
		}
		
		/** Returns the button which displays the item held by this cell. */
		public ImageTextButton getButton()
		{
			return button;
		}
	}
}
