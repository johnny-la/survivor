package com.jonathan.survivor.screens;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputAdapter;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.List;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.jonathan.survivor.Profile;
import com.jonathan.survivor.Survivor;
import com.jonathan.survivor.hud.ConfirmDialog;

public class GameSelectScreen extends Screen
{
	/** Stores the stage used as a container for the UI widgets. It is essentially the camera that draws the widgets. */
	private Stage stage;	
	
	/** InputListener which receives an event when the BACK button is pressed on Android devices. Allows the user to switch back to the main menu. */
	private InputListener inputListener;
	
	/** Class allowing us to set multiple instance of InputListeners to receive input events. */
	private InputMultiplexer inputMultiplexer;
	
	/** Stores the table actor. This actor arranges the widgets at the center of the screen in a grid-like fashion. */
	private Table table;	
	
	/** Stores the label displaying the header. */
	private Label header;
	
	/** Stores the horizontal offset between each of the three main buttons on the screen. */
	private static final float BUTTON_X_OFFSET = 10f;
	
	/** Holds the "New Game" button */
	private TextButton newGameButton;	
	/** Stores the button used to continue the game from the player's last profile. */
	private TextButton continueButton;	
	/** Stores the button used to load one of the player's saved profiles. */
	private TextButton loadButton;	
	
	/** Holds the "Back" button */
	private TextButton backButton;
	
	/** Holds the confirm dialog shown when the user presses the 'delete' button. */
	private ConfirmDialog confirmDialog;	
	
	/** Stores the items shown by the world selection list. */
	private String[] listItems;	
	/** Stores the list which allows the user to choose a world. */
	private List worldSelectList;	
	
	/** Holds the width of the world selection list. That is, the width of the blue bar in pixels for the target resolution (480x320). */
	private final static float WORLD_LIST_WIDTH = 280f;	

	public GameSelectScreen(Survivor game)
	{
		super(game);
	}
	
	@Override
	public void show()
	{
		//Create a stage used to draw the UI widgets.
		stage = new Stage();
		
		//Creates the InputListener which receives an event when the Android BACK button is pressed. Allows the user to transition back to the main menu.
		inputListener = new InputListener();
		
		//Creates the multiplexer to allows several classes to receive touch input and keyboard input. 
		inputMultiplexer = new InputMultiplexer();

		//Allows the stage to handle any touch/mouse input. Tells the widgets that they can receive touch events.
		inputMultiplexer.addProcessor(stage);
		//Allows the inputListener to receive input events, for instance when the Android BACK button is pressed. 
		inputMultiplexer.addProcessor(inputListener);
		
		//Registers all the input processors from the multiplexer to receive input events.
		Gdx.input.setInputProcessor(inputMultiplexer);
		
		//Creates a table using the main menu Skin. This table places widgets in grid-like fashion. Why the skin is passed is unknown.
		table = new Table(assets.mainMenuSkin);
		
		//Creates a label displaying the header. We pass in the mainMenuHeaderStyle as the LabelStyle. This tells the label which font/color to choose.
		header = new Label("CHOOSE WORLD", assets.mainMenuHeaderStyle);
		
		//Creates the button which allows the player to create a new world.
		newGameButton = new TextButton("New Game", assets.mainMenuButtonStyle);
		//Make the new game button red.
		newGameButton.setColor(Color.RED);
		//Resize the new game button according to the scale factor. The scale factor is either 4, 2, or 1, depending on which texture size we are using. If we are
		//using @2x size textures, we need to shrink the button to half its orginal size. Like this, the buttons are always the same size, no matter which texture
		//atlas is used. This allows the stage to keep a constant size no matter the texture size.
		newGameButton.setSize(newGameButton.getWidth()/assets.scaleFactor, newGameButton.getHeight()/assets.scaleFactor);
		
		//Create the options button using the main menu button style. This gives the button the desired up/down images.
		backButton = new TextButton("BACK", assets.mainMenuButtonStyle);
		//Makes the back button's image dark gray.
		backButton.setColor(Color.DARK_GRAY);
		//Resize the back button according to the scale factor. The scale factor is either 4, 2, or 1, depending on which texture size we are using. If we are
		//using @2x size textures, we need to shrink the button to half its orginal size. Like this, the buttons are always the same size, no matter which texture
		//atlas is used. This allows the stage to keep a constant size no matter the texture size.
		backButton.setSize(backButton.getWidth()/assets.scaleFactor, backButton.getHeight()/assets.scaleFactor);
		
		//Creates the continue button which prompts the user to start the game from his last saved profile..
		continueButton = new Button(assets.deleteButtonStyle);
		//Scales the Delete Button down so that according to the scaleFactor of the assets. This way, no matter the size of the atlases
		//chosen, the buttons are the same size.
		continueButton.setSize(continueButton.getWidth() / assets.scaleFactor, continueButton.getHeight() / assets.scaleFactor);
		
		//Add a click listener to the new game button
		newGameButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//Retrieves the profile corresponding to the chosen item in the world list using profileManager.getProfile(id, createNew), where the id of the profile
				//corresponds to the chosen index of the list, and the second argument specfies to create a new profile if one doesn't already exist.
				Profile profile = profileManager.getProfile(worldSelectList.getSelectedIndex(), true);
				
				//Disposes of the assets used by the loading and company splash screen to free up system resources.
				assets.disposeInitialAssets();
				
				//Switch the GameScreen, passing in the chosen profile as a second argument.
				game.setScreen(new GameScreen(game, profile));
			}
		});
		
		//Add a click listener to the back button
		backButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//Play the "swoosh" sound effect when the "Back" button is pressed.
				//soundManager.play(assets.swoosh);
				//Return the user back to the main menu.
				backPressed();
			}
		});
		
		//Add a click listener to the delete button
		continueButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//Displays the confirm dialog for the user to accept deleting the selected profile.
				confirmDialog.show(stage);
			}
		});
		
		//Creates the confirmation dialog which opens when the delete button is pressed. Constructor accepts title of dialog, along with ClickListener 
		//which gets its clicked() method called when the 'Yes' button is pressed.
		confirmDialog = new ConfirmDialog("Are you sure you want\nto delete this profile?", new ClickListener() {
			//Called when the "Yes" button is clicked.
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//Deletes the profile from the selected item in the list. Removes the profile from the hard drive.
				deleteProfile(worldSelectList.getSelectedIndex());
			}
		});
		
		//Creates the world selection list.
		createWorldList();
		
		//Add the header to the top of the table, make it span two columns, skip a row, and pad the edged by 10 units.
		table.add(header).colspan(2).row().pad(10);
		//Add the world selection list to the table, and make it span two columns. The width of the list is resized so that the blue box is the same size no matter how
		//big the largest label on the list is. Then, skip a row. Note that List.getWidth() actually returns the width of the largest string in the list.
		table.add(worldSelectList).colspan(2).width(WORLD_LIST_WIDTH).row();
		//Add the play button to the table, and give it a 10 pixel blank space around its edges. We set the width and height of the table's cell to the button's width
		//and height to ensure that the button is not scaled when added to the table.
		table.add(newGameButton).pad(10).width(newGameButton.getWidth()).height(newGameButton.getHeight());
		//Add the back button to the table, and give it a 10 pixel blank space around its edges. We set the width and height of the table's cell to the button's width
		//and height to ensure that the button is not scaled when added to the table.
		table.add(backButton).pad(10).width(backButton.getWidth()).height(backButton.getHeight());
		
		//Add the table to the stage, telling the stage to draw all of the widgets inside the table when stage.draw() is called.
		stage.addActor(table);
		//Adds the delete button to be rendered on the stage at the position set in 'updateDeleteButton()'
		stage.addActor(continueButton);
		
	}
	
	/** Creates the world selection list, fetching the profiles to figure out what each item in the list should state. */
	private void createWorldList()
	{
		//Populates the 'listItems:String[]' array with the data of every profile saved on the hard drive to be displayed in the list.
		populateWorldList();
		
		//Create a list to select a world using the list of items and the list style from the assets class. The style defines the look of the list.
		worldSelectList = new List(listItems, assets.mainMenuListStyle);
		//Sets the color of the filled box around the selected item to blue.
		worldSelectList.setColor(new Color(0, 0.4f, 1, 1));
		
		//Adds a ChangeListener on the list to detect when the selected profile is changed.
		worldSelectList.addListener(new ChangeListener() {
			//Delegates when the selected item for the world list changed.
			public void changed(ChangeEvent event, Actor actor)
			{
				//Updates the position of the delete button to be next to the currently-selected item in the world select list.
				updateDeleteButton(worldSelectList.getSelectedIndex());
			}
		});

	}
	
	/** Populates the 'listItems:String[]' array with every profile saved in the hard drive. Called when the world list's items must be re-initialized. */
	private void populateWorldList()
	{
		//Stores the maximum amount of profiles the user can have.
		int len = profileManager.getMaxProfiles();
		//Creates a new array of strings containing each item in the list. Each item is a string. We need 'len' strings; one for every profile.
		listItems = new String[len];
		
		//Cycles through all the profiles contained by the profile manager.
		for(int i = 0; i < len; i++)
		{
			//Stores the profile with the given index.
			Profile profile = profileManager.getProfile(i);
			
			//If the profile does not exist, it means that no save file exists for the world. So, say you need to create a new world.
			if(profile == null)
			{
				//Makes the item say you need to create a new world. This is because the profile for the given index doesn't exist.
				listItems[i] = "Create New";
			}
			//Else, if the profile exists, populate the list item with a string representation of the profile.
			else
			{
				//Populate the item with a string containing the date last modified of the profile.
				listItems[i] = profile.toString();
			}
		}
	}
	
	/** Deletes the profile with the given index. The index corresponds to the item chosen in the world select list. */
	private void deleteProfile(int index)
	{
		//Deletes the profile with the given index from the hard drive.
		profileManager.deleteProfile(index);
		
		//Re-populates the 'listItems:String[]' array in order to remove the deleted profile from the world select list. 
		populateWorldList();
		
		//Update the world select list to display the new list of profiles.
		worldSelectList.setItems(listItems);
		
		//Reset the correct selected index of the list, since the selected item was set to zero when calling worldSelectList.setItems(...)
		worldSelectList.setSelectedIndex(index);
		
		//Hide the delete button since the selected profile no longer exists, and thus cannot be deleted.
		continueButton.setVisible(false);
	}
	
	/** Updates the position of the delete button to be right next to the currently-selected item of the world list. The selected
	 * index is the index chosen in the world select list.*/
	private void updateDeleteButton(int selectedIndex)
	{
		//If the selected profile doesn't already exist on the hard drive
		if(profileManager.getProfile(selectedIndex) == null)
			//Hide the deleteButton, since the selected profile is a "Create New" profile, and thus cannot be deleted
			continueButton.setVisible(false);
		//Else, if the selected profile already exists
		else
			//Allow the deleteButton to be shown.
			continueButton.setVisible(true);
		
		//Gets the height of each item/label in the world select list.
		float labelHeight = worldSelectList.getHeight() / worldSelectList.getItems().length;
		//Stores the y-position of the top of the list.
		float topListY = worldSelectList.getY() + worldSelectList.getHeight();
		
		//Sets the x-position of the delete button to be to the right of a selection in the list.
		continueButton.setX(stage.getWidth()/2 + WORLD_LIST_WIDTH/2 + DELETE_BUTTON_OFFSET);
		//Sets the y-position of the delete button to the at the center of the currently selected item in the list.
		continueButton.setY(topListY - continueButton.getHeight()/2 - labelHeight/2
							- (selectedIndex * labelHeight));
	}
	
	/** Called when the world select screen is created. Called to place the delete button at the position of the first item in the list. */
	private void initializeDeleteButton() 
	{
		//Ensures that all of the stage's widgets have their size and attributes updated
		stage.draw();
		//Places the delete button next to the first index in the world selection list.
		updateDeleteButton(0);
	}
	
	@Override
	public void render(float deltaTime)
	{
		//Sets OpenGL to clear the screen with white.
		Gdx.gl.glClearColor(1,1,1,1);
		//Clear the screen.
		super.render(deltaTime);
		
		//Prepare the widgets inside the stage to be drawn.
		stage.act(deltaTime);
		//Draw the stage, effectively drawing all the 2D widgets to the screen.
		stage.draw();
	}
	
	@Override
	public void resize(int width, int height)
	{
		//Re-compute the value of the guiWidth and guiHeight superclass variables to ensure that the gui fits the new aspect ratio of the screen.
		super.resize(width, height);
		
		//Set the viewport of the stage to the guiWidth/Height member variables. This ensures that the viewable area of the stage is the desired width and height
		//of the GUI. Note that these variables were defined in the superclass to be the desired default width and height of a GUI. However, the smallest dimension
		//is resized to fit the screen's aspect ratio to avoid uneven stretching. If the device's screen is guiWidth x guiHeight, the GUI is pixel perfect.
		stage.setViewport(guiWidth, guiHeight);
		//Sets the bounds of the table. This is essentially the largest the table can be. We set it to the full width of the GUI for the table to fill the screen.
		table.setBounds(0, 0, guiWidth, guiHeight);
		
		//Places the delete button at its correct position once the GUI is first shown
		initializeDeleteButton();
		
	}

	@Override
	public void dispose()
	{
		//Disposes of the SpriteBatcher in the superclass.
		super.dispose();
		
		//Dispose of any resources used by the MainMenuScreen.
		stage.dispose();
	}
	
	@Override
	public void pause() 
	{
	}

	@Override
	public void resume() 
	{
	}
	
	/** Receives input-related events, such as the user pressing the BACK button on his Android device. */
	private class InputListener extends InputAdapter
	{
		/** Called when a key is pressed. */
		@Override
		public boolean keyDown(int keycode)
		{
			//If the Android BACK button has been pressed
			if(keycode == Keys.BACK)
			{
				//Lets the WorldSelectScreen know that the user should be brought back to the main menu
				backPressed();
			}
			
			return false;
		}
	}
	
	/** Called when either the visual BACK button is pressed, or when the Android BACK button is pressed. Move the user back to the main menu, */
	public void backPressed()
	{
		//Return to the main menu once the "Back" button is pressed.
		game.setScreen(new MainMenuScreen(game));
	}
}
