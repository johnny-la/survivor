package com.jonathan.survivor;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.graphics.FPSLogger;
import com.jonathan.survivor.managers.MusicManager;
import com.jonathan.survivor.managers.ProfileManager;
import com.jonathan.survivor.managers.SoundManager;
import com.jonathan.survivor.screens.CompanySplashScreen;

public class Survivor extends Game 
{
	/** Stores the default size of a GUI camera. Every GUI camera should have this size by default. However, this size can change depending on the aspect
	 *  ratio of the screen. The width and height are modified to match the aspect ratio of the screen, to prevent stretching. This new size is stored 
	 *  inside the guiWidth/Height variable of each Screen instance
	 */
	public static final float DEFAULT_GUI_WIDTH = 480;
	public static final float DEFAULT_GUI_HEIGHT = 320;
	
	/** Stores the default size of a camera displaying the world. Every world camera should have this size by default. However, this size can change depending 
	 *  on the aspect ratio of the screen. The width and height are modified to match the aspect ratio of the screen, to prevent stretching. This new size is 
	 *  stored inside the worldWidth/Height variable of each Screen instance. This is in meters. With these values, 1 meter = 32 pixels. 
	 */
	public static final float DEFAULT_WORLD_WIDTH = 15;
	public static final  float DEFAULT_WORLD_HEIGHT = 10;
	
	/** Stores the scale of the world relative to screen coordinates. The GUI size will always target a specific resolution, say 480x320. The world will usually
	 *  model its coordinate system in meters, with the same aspect ratio as the target device (e.g., 15x10, where 32 pixels=1 meter. Thus, in this case, the world
	 *  is scaled 480/15 = 0.03125 times smaller than pixel coordinates. Thus, all texture have to be downscaled by this factor */
	public static final float WORLD_SCALE = DEFAULT_WORLD_WIDTH / DEFAULT_GUI_WIDTH;
	
	/** Stores the maximum amount of profiles the user can have. This is the amount of worlds that appear on the world selection list. */
	public static final int MAX_PROFILES = 3;
	
	/** Stores the universal Music Manager used by the game which plays music and controls the volume of music. */
	private MusicManager musicManager;
	/** Stores the universal Sound Manager used by the game which plays sounds and controls the volume of sound effects. */
	private SoundManager soundManager;
	/** Stores the universal Profile Manager used by the game which retrieves/saves profiles from/to the hard drive. */
	private ProfileManager profileManager;
	
	/** Stores whether or not we are in debug mode */
	public static final boolean DEBUG_MODE = true;
	/** Logs the framerate to the console */
	private FPSLogger fpsCounter = new FPSLogger();
	
	@Override
	public void create()
	{
		//Creates a new MusicManager and SoundManager to play and manage music and sound effects.
		musicManager = new MusicManager();
		soundManager = new SoundManager();
		//Creates the profile manager instance, used to manage the profiles used by the user. Parameter specifies how many profiles the manager can hold.
		profileManager = new ProfileManager(MAX_PROFILES);
		
		//Set the starting screen of the application to the CompanySplashScreen. This is done through the Game.setScreen(Screen) method.
		setScreen(new CompanySplashScreen(this));
	}
	
	@Override
	public void render()
	{
		//Calls the render method of the currently active screen.
		super.render();
		
		//Display the framerate if in debug mode.
		if(DEBUG_MODE)
			fpsCounter.log();
	}
	
	@Override
	public void resume()
	{
		//Calls the resume method of the currently active screen
		super.resume();
	}
	
	@Override
	public void pause()
	{
		//Calls the pause method of the currently active screen.
		super.pause();
	}
	
	@Override 
	public void resize(int width, int height)
	{
		//Calls the resize method of the currently active screen. Changes the guiWidth/Height and worldWidth/Height member variable of each screen accordingly.
		super.resize(width, height);
	}
	
	/** Returns the universal MusicManager used by the game to play music and control its volume */
	public MusicManager getMusicManager()
	{
		return musicManager;
	}
	
	/** Returns the universal SounddManager used by the game to play sounds and control their volume */
	public SoundManager getSoundManager()
	{
		return soundManager;
	}
	
	/** Returns the universal ProfileManager used by the game to access the profiles owned by the user. */
	public ProfileManager getProfileManager()
	{
		return profileManager;
	}
	
	/** Called when the application quits. */
	@Override
	public void dispose()
	{
		//Calls the hide() method of the screen.
		super.dispose();
		
		//Free any resources allocated to any visual/audio assets used by the game.
		Assets.instance.dispose();
		//DONOT call. Otherwise, the screen's dispose method will be called twice, since it is called from the Screen.hide() method.
		//getScreen().dispose();
	}
	
	
}
