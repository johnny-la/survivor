package com.jonathan.survivor.hud;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.List;
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.jonathan.survivor.World;

public class SurvivalGuideHud extends Hud
{
	/** Stores the amount the list is offset up, relative to the center of the screen. This is the top-most y-position of the text, where 0 will place it at the center of the screen. */
	public static final float LIST_Y_OFFSET = 52;
	/** Holds the amount the list is nudged to the left. This allows the entries in the list to look left-aligned. */
	public static final float LIST_X_OFFSET = 118;
	
	/** Holds the width and height of the scroll pane where entries are displayed in the survival guide. */
	public static final float SCROLL_PANE_WIDTH = 260;
	public static final float SCROLL_PANE_HEIGHT = 160;
	
	/** Stores the x-offset of the "Guide" header relative to the center of the screen. */
	public static final float HEADER_X_OFFSET = 100;	//Unused
	/** Stores the offset between the bottom of the "Guide" header and the top of the listof entries. Adds spacing between the header and the buttons. */
	public static final float HEADER_Y_OFFSET = 10;		//Unused

	/** Stores the offset used to anchor the back button to the bottom-right of the screen with a certain padding. */
	public static final float BACK_BUTTON_X_OFFSET = 28;
	public static final float BACK_BUTTON_Y_OFFSET = 13;
	
	
	/** Stores the image of the survival guide's background. */
	private Image survivalGuideBg;
	
	/** Stores the list prompting the user to select an item to view in the survival guide. */
	private List list;
	
	/** Holds the label displaying the description for the entry the user clicked. */
	private Label entryLabel;
	
	/** Stores the ScrollPane which allows the items in the survival guide to be scollable. */
	private ScrollPane scrollPane;
	
	/** Holds the table where the scroll pane is contained. This is the high-level container for the list. */
	private Table scrollPaneTable;
	
	/** True if the description for an entry is currently being shown. On back, revert to the entry name list. */
	private boolean displayingDescription;
	
	/** Holds the list of entry names that the user can choose from the list. */
	private final String[] entryNames = new String[]{"Exploration Tutorial", "Combat tutorial", "How to Escape", "Recipes"}; 
	/** Holds the description of every entry in the survival guide. */
	private final String[] entries = new String[]{"To move left or right, press the \ndirectional arrows on the bottom of \nthe screen.\n\n" +
												  "Press any object in the world to \nwalk towards it and interact with it.\n",
												  
												  "To enter combat with a zombie, \nsimply come into contact with a \nzombie in the world.\n\n" +
												  "To jump, press the green button \non the bottom-left.\n\n" +
												  "By hitting \nthe zombie head, you can deal \ndamage to him.\n\n" +
												  "To melee the zombie, \npress the orange \nbutton on the bottom-right.\n\n" +
												  "To fire your ranged weapon, press the \nred button on the bottom-right\n" +
												  "(Note: each shot requires one bullet)",
			
												  "Build a Time Machine\n" +
												  "- 40 sulfur + 120 wood\n + 100 iron + 40 saltpeter", 
												  
											      "Axe:" +
											      " 10 wood + 5 iron\n" +
											      "Rifle:" +
											      " 15 wood + 10 iron\n" +
											      "Bullets:" +
											      " 4 gunpowder + 2 iron\n" +
											      "Gunpowder:" +
											      " 6 sulfur + 4 water \n+ 12 saltpeter + 8 charcoal"};
	
	/** Stores the back button, used to exit out of the backpack hud. */
	private Button backButton;
	
	/** Stores the Table instance where buttons are organized in a grid-like fashion. */
	private Table table;
	
	/** Accepts the stage where widgets are placed. The passed world is unused for this HUD. */
	public SurvivalGuideHud(Stage stage, World world)
	{
		super(stage, world);
		
		//Creates the image displaying the backpack background. Uses the pre-defined TextureRegion displaying the background.
		survivalGuideBg = new Image(assets.survivalGuideBgRegion);
		//Re-scales the background so that it takes the same space on the screen no matter the atlas size chosen.
		survivalGuideBg.setSize(survivalGuideBg.getWidth() / assets.scaleFactor, survivalGuideBg.getHeight() / assets.scaleFactor);
		
		//Creates the list displaying the names of all entries in the survival guide.
		list = new List(entryNames, assets.survivalGuideListStyle);
		//Makes it so that the selection box around the selected item in the list is invisible. No selection box should appear in the entry list.
		list.setColor(Color.CLEAR);
		
		//Reset the list's index to negative one, so that any item in the list will trigger the changed() method when initially pressed.
		list.setSelectedIndex(-1);
		
		//Instantiates the label that will display the description for an entry in the survival guide.
		entryLabel = new Label("", assets.smallLabelStyle);
		
		//Places the list inside the ScrollPane to add scrolling functionality to that list.
		scrollPane = new ScrollPane(list, assets.inventoryScrollPaneStyle);
		//Modifies the overscroll of the scroll pane. Args: maxOverscrollDistance, minVelocity, maxVelocity
		scrollPane.setupOverscroll(30, 100, 200);
		//Disables scrolling in the x-direction.
		scrollPane.setScrollingDisabled(true, false);
		
		//Creates the back button using the designated ButtonStyle, which dictates its appearance.
		backButton = new Button(assets.backButtonStyle);
		//Resizes the back button so that, no matter the size of the atlas chosen, the button will occupy the same space in gui coordinates.
		backButton.setSize(backButton.getWidth() / assets.scaleFactor, backButton.getHeight() / assets.scaleFactor);
		
		//Adds a change listener to the list to detect when an entry name is selected.
		list.addListener(new ChangeListener() {
			@Override
			public void changed(ChangeEvent event, Actor actor) {
				//Show the entry description for the given entry index that was pressed.
				showEntryDescription(list.getSelectedIndex());			
				//Reset the list's index to negative one, so that any item in the list will trigger the changed() method when pressed.
				list.setSelectedIndex(-1);
			}

		});
		
		//Add a ClickListener to the back button
		backButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				//If the survival guide is currently showing an entry description.
				if(displayingDescription)
				{
					//Revert back to the list of entry names
					showEntryList();
				}
				//Else, if the list of entry names is being shown
				else
				{
					//Tell the game screen to revert back to the backpack hud.
					hudListener.onBack();
				}
			}
		});
		
		//Creates a new Table instance to neatly arrange the buttons on the hud.
		table = new Table();
		table.setFillParent(true);
		//Adds the list of survival guide entries to the table. Pads it to the left so that it is nudged to the right.
		table.add(scrollPane).width(SCROLL_PANE_WIDTH).height(SCROLL_PANE_HEIGHT);;
		
	}
	
	@Override
	public void draw(float deltaTime)
	{
		//Draws the Survival Guide HUD and its widgets to the screen.
		super.draw(deltaTime);
	}
	
	/** Displays the list consisting of entry names. */
	private void showEntryList() 
	{
		//Replaces the entry description with the entry list. 
		scrollPane.setWidget(list);
		
		//Tells the survival guide HUD it is displaying the list of entry names, and not an entry description
		displayingDescription = false;
		
		//Offsets the table's position so that the beginning of each entry description starts at the same position.
		offsetTablePosition();
		
	}
	
	/** Displays the description for the entry with the given index in the entryNames:String[] array. */
	private void showEntryDescription(int index) 
	{		
		//Set the label to hold the description for the pressed entry
		entryLabel.setText(entries[index]);
		
		//Make the scroll pane display the newly updated entryLabel. The label shows the description for the pressed entry.
		scrollPane.setWidget(entryLabel);
		
		//Tells the survival guide that it is currently displaying the description for an entry. On back button, the list of entry names will be shown.
		displayingDescription = true;
		
		//Offsets the table so that the header and the entry list are in the right position.
		offsetTablePosition();
		
	}

	/** Called either when this pause menu is supposed to be displayed, or when the screen is resized. Parameters indicate the size that the HUD should occupy. */
	@Override
	public void reset(float guiWidth, float guiHeight) 
	{
		//Clear the current contents of the stage to erase the previously-displayed Hud and make way for the pause menu's widgets.
		stage.clear();
		
		//Resizes the table so that it occupies the entire size of the gui to thus occupy the entire stage.
		table.setBounds(0, 0, guiWidth, guiHeight);
		
		//Centers the survival guide background to the stage. Note that the position is the bottom-left of survivalGuideBg's image.
		survivalGuideBg.setPosition(stage.getWidth()/2 - survivalGuideBg.getWidth()/2, stage.getHeight()/2 - survivalGuideBg.getHeight()/2);
		//Anchors the back button to the bottom-right of the survival guide background, using the given offsets. Note that button positions are the bottom-left of the buttons.
		backButton.setPosition(survivalGuideBg.getX() + survivalGuideBg.getWidth() - backButton.getWidth() - BACK_BUTTON_X_OFFSET, survivalGuideBg.getY() + BACK_BUTTON_Y_OFFSET);
		
		//Adds the survival guide background to the center of the stage.
		stage.addActor(survivalGuideBg);
		//Adds the back button to the stage.
		stage.addActor(backButton);
		
		//Adds the table to the stage so that its widgets are drawn to the screen.
		stage.addActor(table);
		
		//Sets the table at the correct position.
		offsetTablePosition();
		
	}

	/** Offsets the position of the table so that the header is at the right position */
	private void offsetTablePosition() 
	{
		//Draws the widgets on the stage to ensure that each widget's size is updated.
		stage.draw();
		
		//Stores the width and height of the table depending on whether an entry description or the entry list is being displayed.
		float tableWidth = (displayingDescription)? entryLabel.getWidth() : list.getWidth();
		float tableHeight = (displayingDescription)? entryLabel.getHeight() : list.getHeight();
		
		//Offsets the table so that the text is left aligned at x = LIST_X_OFFSET. 
		table.setX(tableWidth/2 - LIST_X_OFFSET);
		//Sets the y-position of the table so that the top of the text inside the guide is always at the same height relative to screen's center.
		table.setY(LIST_Y_OFFSET - tableHeight/2);
	}
}
