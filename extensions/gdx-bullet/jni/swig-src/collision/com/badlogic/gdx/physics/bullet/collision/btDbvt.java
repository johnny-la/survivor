/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.collision;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class btDbvt extends BulletBase {
	private long swigCPtr;
	
	protected btDbvt(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, cPtr, cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new btDbvt, normally you should not need this constructor it's intended for low-level usage. */ 
	public btDbvt(long cPtr, boolean cMemoryOwn) {
		this("btDbvt", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(swigCPtr = cPtr, cMemoryOwn);
	}
	
	public static long getCPtr(btDbvt obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				CollisionJNI.delete_btDbvt(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setRoot(btDbvtNode value) {
    CollisionJNI.btDbvt_root_set(swigCPtr, this, btDbvtNode.getCPtr(value), value);
  }

  public btDbvtNode getRoot() {
    long cPtr = CollisionJNI.btDbvt_root_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvtNode(cPtr, false);
  }

  public void setFree(btDbvtNode value) {
    CollisionJNI.btDbvt_free_set(swigCPtr, this, btDbvtNode.getCPtr(value), value);
  }

  public btDbvtNode getFree() {
    long cPtr = CollisionJNI.btDbvt_free_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvtNode(cPtr, false);
  }

  public void setLkhd(int value) {
    CollisionJNI.btDbvt_lkhd_set(swigCPtr, this, value);
  }

  public int getLkhd() {
    return CollisionJNI.btDbvt_lkhd_get(swigCPtr, this);
  }

  public void setLeaves(int value) {
    CollisionJNI.btDbvt_leaves_set(swigCPtr, this, value);
  }

  public int getLeaves() {
    return CollisionJNI.btDbvt_leaves_get(swigCPtr, this);
  }

  public void setOpath(long value) {
    CollisionJNI.btDbvt_opath_set(swigCPtr, this, value);
  }

  public long getOpath() {
    return CollisionJNI.btDbvt_opath_get(swigCPtr, this);
  }

  public void setStkStack(SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t value) {
    CollisionJNI.btDbvt_stkStack_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t getStkStack() {
    long cPtr = CollisionJNI.btDbvt_stkStack_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t(cPtr, false);
  }

  public void setRayTestStack(SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t value) {
    CollisionJNI.btDbvt_rayTestStack_set(swigCPtr, this, SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t getRayTestStack() {
    long cPtr = CollisionJNI.btDbvt_rayTestStack_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t(cPtr, false);
  }

  public btDbvt() {
    this(CollisionJNI.new_btDbvt(), true);
  }

  public void clear() {
    CollisionJNI.btDbvt_clear(swigCPtr, this);
  }

  public boolean empty() {
    return CollisionJNI.btDbvt_empty(swigCPtr, this);
  }

  public void optimizeBottomUp() {
    CollisionJNI.btDbvt_optimizeBottomUp(swigCPtr, this);
  }

  public void optimizeTopDown(int bu_treshold) {
    CollisionJNI.btDbvt_optimizeTopDown__SWIG_0(swigCPtr, this, bu_treshold);
  }

  public void optimizeTopDown() {
    CollisionJNI.btDbvt_optimizeTopDown__SWIG_1(swigCPtr, this);
  }

  public void optimizeIncremental(int passes) {
    CollisionJNI.btDbvt_optimizeIncremental(swigCPtr, this, passes);
  }

  public btDbvtNode insert(btDbvtAabbMm box, long data) {
    long cPtr = CollisionJNI.btDbvt_insert(swigCPtr, this, btDbvtAabbMm.getCPtr(box), box, data);
    return (cPtr == 0) ? null : new btDbvtNode(cPtr, false);
  }

  public void update(btDbvtNode leaf, int lookahead) {
    CollisionJNI.btDbvt_update__SWIG_0(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf, lookahead);
  }

  public void update(btDbvtNode leaf) {
    CollisionJNI.btDbvt_update__SWIG_1(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf);
  }

  public void update(btDbvtNode leaf, btDbvtAabbMm volume) {
    CollisionJNI.btDbvt_update__SWIG_2(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf, btDbvtAabbMm.getCPtr(volume), volume);
  }

  public boolean update(btDbvtNode leaf, btDbvtAabbMm volume, Vector3 velocity, float margin) {
    return CollisionJNI.btDbvt_update__SWIG_3(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf, btDbvtAabbMm.getCPtr(volume), volume, velocity, margin);
  }

  public boolean update(btDbvtNode leaf, btDbvtAabbMm volume, Vector3 velocity) {
    return CollisionJNI.btDbvt_update__SWIG_4(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf, btDbvtAabbMm.getCPtr(volume), volume, velocity);
  }

  public boolean update(btDbvtNode leaf, btDbvtAabbMm volume, float margin) {
    return CollisionJNI.btDbvt_update__SWIG_5(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf, btDbvtAabbMm.getCPtr(volume), volume, margin);
  }

  public void remove(btDbvtNode leaf) {
    CollisionJNI.btDbvt_remove(swigCPtr, this, btDbvtNode.getCPtr(leaf), leaf);
  }

  public void write(SWIGTYPE_p_btDbvt__IWriter iwriter) {
    CollisionJNI.btDbvt_write(swigCPtr, this, SWIGTYPE_p_btDbvt__IWriter.getCPtr(iwriter));
  }

  public void clone(btDbvt dest, SWIGTYPE_p_btDbvt__IClone iclone) {
    CollisionJNI.btDbvt_clone__SWIG_0(swigCPtr, this, btDbvt.getCPtr(dest), dest, SWIGTYPE_p_btDbvt__IClone.getCPtr(iclone));
  }

  public void clone(btDbvt dest) {
    CollisionJNI.btDbvt_clone__SWIG_1(swigCPtr, this, btDbvt.getCPtr(dest), dest);
  }

  public static int maxdepth(btDbvtNode node) {
    return CollisionJNI.btDbvt_maxdepth(btDbvtNode.getCPtr(node), node);
  }

  public static int countLeaves(btDbvtNode node) {
    return CollisionJNI.btDbvt_countLeaves(btDbvtNode.getCPtr(node), node);
  }

  public static void extractLeaves(btDbvtNode node, SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t leaves) {
    CollisionJNI.btDbvt_extractLeaves(btDbvtNode.getCPtr(node), node, SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.getCPtr(leaves));
  }

  public static void benchmark() {
    CollisionJNI.btDbvt_benchmark();
  }

  public static void enumNodes(btDbvtNode root, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_enumNodes(btDbvtNode.getCPtr(root), root, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public static void enumLeaves(btDbvtNode root, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_enumLeaves(btDbvtNode.getCPtr(root), root, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public void collideTT(btDbvtNode root0, btDbvtNode root1, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_collideTT(swigCPtr, this, btDbvtNode.getCPtr(root0), root0, btDbvtNode.getCPtr(root1), root1, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public void collideTTpersistentStack(btDbvtNode root0, btDbvtNode root1, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_collideTTpersistentStack(swigCPtr, this, btDbvtNode.getCPtr(root0), root0, btDbvtNode.getCPtr(root1), root1, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public void collideTV(btDbvtNode root, btDbvtAabbMm volume, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_collideTV(swigCPtr, this, btDbvtNode.getCPtr(root), root, btDbvtAabbMm.getCPtr(volume), volume, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public static void rayTest(btDbvtNode root, Vector3 rayFrom, Vector3 rayTo, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_rayTest(btDbvtNode.getCPtr(root), root, rayFrom, rayTo, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public void rayTestInternal(btDbvtNode root, Vector3 rayFrom, Vector3 rayTo, Vector3 rayDirectionInverse, long[] signs, float lambda_max, Vector3 aabbMin, Vector3 aabbMax, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_rayTestInternal(swigCPtr, this, btDbvtNode.getCPtr(root), root, rayFrom, rayTo, rayDirectionInverse, signs, lambda_max, aabbMin, aabbMax, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public static void collideKDOP(btDbvtNode root, btVector3 normals, java.nio.FloatBuffer offsets, int count, SWIGTYPE_p_btDbvt__ICollide policy) {
    assert offsets.isDirect() : "Buffer must be allocated direct.";
    {
      CollisionJNI.btDbvt_collideKDOP(btDbvtNode.getCPtr(root), root, btVector3.getCPtr(normals), normals, offsets, count, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
    }
  }

  public static void collideOCL(btDbvtNode root, btVector3 normals, java.nio.FloatBuffer offsets, Vector3 sortaxis, int count, SWIGTYPE_p_btDbvt__ICollide policy, boolean fullsort) {
    assert offsets.isDirect() : "Buffer must be allocated direct.";
    {
      CollisionJNI.btDbvt_collideOCL__SWIG_0(btDbvtNode.getCPtr(root), root, btVector3.getCPtr(normals), normals, offsets, sortaxis, count, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy), fullsort);
    }
  }

  public static void collideOCL(btDbvtNode root, btVector3 normals, java.nio.FloatBuffer offsets, Vector3 sortaxis, int count, SWIGTYPE_p_btDbvt__ICollide policy) {
    assert offsets.isDirect() : "Buffer must be allocated direct.";
    {
      CollisionJNI.btDbvt_collideOCL__SWIG_1(btDbvtNode.getCPtr(root), root, btVector3.getCPtr(normals), normals, offsets, sortaxis, count, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
    }
  }

  public static void collideTU(btDbvtNode root, SWIGTYPE_p_btDbvt__ICollide policy) {
    CollisionJNI.btDbvt_collideTU(btDbvtNode.getCPtr(root), root, SWIGTYPE_p_btDbvt__ICollide.getCPtr(policy));
  }

  public static int nearest(java.nio.IntBuffer i, SWIGTYPE_p_btDbvt__sStkNPS a, float v, int l, int h) {
    assert i.isDirect() : "Buffer must be allocated direct.";
    {
      return CollisionJNI.btDbvt_nearest(i, SWIGTYPE_p_btDbvt__sStkNPS.getCPtr(a), v, l, h);
    }
  }

  public static int allocate(SWIGTYPE_p_btAlignedObjectArrayT_int_t ifree, SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t stock, SWIGTYPE_p_btDbvt__sStkNPS value) {
    return CollisionJNI.btDbvt_allocate(SWIGTYPE_p_btAlignedObjectArrayT_int_t.getCPtr(ifree), SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.getCPtr(stock), SWIGTYPE_p_btDbvt__sStkNPS.getCPtr(value));
  }

  public final static int SIMPLE_STACKSIZE = 64;
  public final static int DOUBLE_STACKSIZE = SIMPLE_STACKSIZE*2;

}
