/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet.softbody;

import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.*;
import com.badlogic.gdx.physics.bullet.collision.*;
import com.badlogic.gdx.physics.bullet.dynamics.*;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;

public class Face extends Feature {
	private long swigCPtr;
	
	protected Face(final String className, long cPtr, boolean cMemoryOwn) {
		super(className, SoftbodyJNI.Face_SWIGUpcast(cPtr), cMemoryOwn);
		swigCPtr = cPtr;
	}
	
	/** Construct a new Face, normally you should not need this constructor it's intended for low-level usage. */
	public Face(long cPtr, boolean cMemoryOwn) {
		this("Face", cPtr, cMemoryOwn);
		construct();
	}
	
	@Override
	protected void reset(long cPtr, boolean cMemoryOwn) {
		if (!destroyed)
			destroy();
		super.reset(SoftbodyJNI.Face_SWIGUpcast(swigCPtr = cPtr), cMemoryOwn);
	}
	
	public static long getCPtr(Face obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	@Override
	protected void finalize() throws Throwable {
		if (!destroyed)
			destroy();
		super.finalize();
	}

  @Override protected synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				SoftbodyJNI.delete_Face(swigCPtr);
			}
			swigCPtr = 0;
		}
		super.delete();
	}

  public void setN(SWIGTYPE_p_p_Node value) {
    SoftbodyJNI.Face_n_set(swigCPtr, this, SWIGTYPE_p_p_Node.getCPtr(value));
  }

  public SWIGTYPE_p_p_Node getN() {
    long cPtr = SoftbodyJNI.Face_n_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_Node(cPtr, false);
  }

  public void setNormal(btVector3 value) {
    SoftbodyJNI.Face_normal_set(swigCPtr, this, btVector3.getCPtr(value), value);
  }

  public btVector3 getNormal() {
    long cPtr = SoftbodyJNI.Face_normal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btVector3(cPtr, false);
  }

  public void setRa(float value) {
    SoftbodyJNI.Face_ra_set(swigCPtr, this, value);
  }

  public float getRa() {
    return SoftbodyJNI.Face_ra_get(swigCPtr, this);
  }

  public void setLeaf(btDbvtNode value) {
    SoftbodyJNI.Face_leaf_set(swigCPtr, this, btDbvtNode.getCPtr(value), value);
  }

  public btDbvtNode getLeaf() {
    long cPtr = SoftbodyJNI.Face_leaf_get(swigCPtr, this);
    return (cPtr == 0) ? null : new btDbvtNode(cPtr, false);
  }

  public Face() {
    this(SoftbodyJNI.new_Face(), true);
  }

}
